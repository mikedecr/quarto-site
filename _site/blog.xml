<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>michael decrescenzo</title>
<link>https://mikedecr.netlify.app/blog.html</link>
<atom:link href="https://mikedecr.netlify.app/blog.xml" rel="self" type="application/rss+xml"/>
<description>political scientist turned high-frequency tradist</description>
<generator>quarto-1.3.302</generator>
<lastBuildDate>Tue, 23 May 2023 05:00:00 GMT</lastBuildDate>
<item>
  <title>Curried functions in R</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/partial_fns_ggplot/index.html</link>
  <description><![CDATA[ 




<p>This post describes a common tool in functional programming known as <em>curried</em> functions (a.k.a. partial functions).</p>
<p>We show how to use them with examples in the R plotting library <code>ggplot2</code>, which presents many currying opportunities.</p>
<section id="in-short" class="level2">
<h2 class="anchored" data-anchor-id="in-short">In short,</h2>
<p>A curried function is a function with some of its arguments fixed. A curried function is also called a “partial” function, because its arguments have been partially pre-supplied. The name comes from Haskell Curry, who was a mathematician and not a food, although I love to eat curries too.</p>
<p>Currying a function with arguments isn’t the same as calling a function with those arguments. Instead it creates a new function that can be called later.</p>
<p>Here is a silly example in R. You have some logical vector <code>b</code>. What is its mean?</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">b <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NA</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>, <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(b)</span>
<span id="cb1-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] NA</span></span></code></pre></div>
</div>
<p>Well, <code>b</code> is missing some data, so the mean is undefined. You can get around this by passing an extra argument to skip over any <code>NA</code> elements.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(b, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.6</span></span></code></pre></div>
</div>
<p>And that works okay, but it’s a function of two arguments. We could imagine a function that achieves the same result with just one argument. Let’s create this function with currying.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># contains `partial`</span></span>
<span id="cb3-2">unsafe_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>This code says, “create a new function that is like <code>mean</code> but with the <code>na.rm</code> argument fixed to <code>TRUE</code>”. The value that we assign to <code>unsafe_mean</code> is a new function. We don’t have to call it until we need it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unsafe_mean</span>(b)</span>
<span id="cb4-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.6</span></span></code></pre></div>
</div>
<p>The curried function is morally the same thing as defining this new function “the long way”,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">unsafe_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
</div>
<p>which has a bit more boilerplate involved.</p>
</section>
<section id="examples-with-ggplot" class="level2">
<h2 class="anchored" data-anchor-id="examples-with-ggplot">Examples with <code>ggplot</code></h2>
<section id="aesthetic-regularities" class="level3">
<h3 class="anchored" data-anchor-id="aesthetic-regularities">Aesthetic regularities</h3>
<p>Sometimes you want to re-use some aesthetic attributes of a plot across several plot components or across several, independent plots. These features may be reusable yet not be worthy to be considered “default” attributes, which you could otherwise set with the <code>ggplot2::update_geom_defaults</code> function. This middle area is a good place for partial functions.</p>
<p>Here is an example where I have two variables in a dataset, and I want to plot histograms for each variable side by side.<sup>1</sup> Without partial functions, I might do this the “long way” with multiple calls to <code>geom_histogram</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tibble)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(ggplot2)</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># first, some data...</span></span>
<span id="cb6-5">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">z =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb6-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">e =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-8">)</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tomato"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> e), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"white"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb6-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mikedecr.netlify.app/blog/partial_fns_ggplot/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This works, but I specified some redundant information in multiple calls to <code>geom_histogram</code>. This is annoying and potentially error-prone, and if I want to change some of these features, I have to change the arguments to multiple functions.</p>
<p>Here is the same plot with a partial function approach:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># create a new histogram function w/ arguments fixed</span></span>
<span id="cb7-2">geom_hist_rv <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(geom_histogram, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'white'</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply our function</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hist_rv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> z), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tomato"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_hist_rv</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> e), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lightblue"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"variable"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mikedecr.netlify.app/blog/partial_fns_ggplot/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>This approach eliminated all redundant information from the specification of the histograms. Call that a win.</p>
</section>
<section id="scale-functions" class="level3">
<h3 class="anchored" data-anchor-id="scale-functions">Scale functions</h3>
<p>When you are working for a while in one project, you are often mapping the same features in your data to the same colors, fills, point shapes, and so on. This leads you to write repeated calls of <code>scale_color_manual(values = c(...))</code>. In my years as a political scientist, I found myself doing this a lot with the same two colors to represent the U.S. Democratic and Republican political parties, for instance. It grows tedious.</p>
<p>But you can create your own <code>scale_</code> functions that encode the “visual semantics” of your project data by currying the built-in <code>scale_</code> functions. You can write these new functions one time and save yourself the effort elsewhere in your project.</p>
<p>For instance, if I always want certain species in the <code>palmerpenguins</code> data to map to the same colors, I can write some functions…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a vector of key-value pairs, species to color</span></span>
<span id="cb8-2">peng_colors <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Adelie"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"violet"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Chinstrap"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"goldenrod"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Gentoo"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"darkcyan"</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># invoke the pairs in curried arguments</span></span>
<span id="cb8-5">scale_color_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(scale_color_manual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> peng_colors)</span>
<span id="cb8-6">scale_fill_species <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(scale_fill_manual, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">values =</span> peng_colors)</span></code></pre></div>
</div>
<p>And now I can employ those visual standards wherever I want.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(palmerpenguins)</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(penguins) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> body_mass_g, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> flipper_length_mm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">color =</span> species, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_point</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_smooth</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">method =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lm"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_color_species</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_fill_species</span>()</span>
<span id="cb9-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## `geom_smooth()` using formula = 'y ~ x'</span></span>
<span id="cb9-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Warning: Removed 2 rows containing non-finite values (`stat_smooth()`).</span></span>
<span id="cb9-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Warning: Removed 2 rows containing missing values (`geom_point()`).</span></span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mikedecr.netlify.app/blog/partial_fns_ggplot/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>And if I ever wanted to change the way I represent species as colors, I change the function in one place only. Nice.</p>
</section>
</section>
<section id="why-use-partial-functions" class="level2">
<h2 class="anchored" data-anchor-id="why-use-partial-functions">Why use partial functions?</h2>
<p>By fixing a function’s arguments, it may seem like we are <strong>restricting</strong> a function’s behavior. And restricting a functions behavior may not seem like a good thing to do when I could have a more general, more flexible function. After all, the point of a function having arguments is to enhance its flexibility, right?</p>
<p>There are a few perfectly good reasons.</p>
<ol type="1">
<li><p><strong>Convenience.</strong> If you are writing the same function many places, but sometimes you invoke one set of arguments and sometimes you invoke others (calls to <code>ggplot2::theme</code> come to mind), it really is no big deal to have another function or two lying around that encapsulate some of those argument sets. This can be especially useful if the argument provision is repetitive and error-prone, as it can be with plotting. It can also be valuable when it’s easier to recall the function name instead of detailed argument data (again, <code>ggplot2::theme</code>). Our examples above how we can lock these arguments into their own functions, so we no longer have to worry about introducing bugs or inconsistencies in our code by misspecifying their “free” parameters.</p></li>
<li><p><strong>Composition.</strong> This is crucial. Functional programming makes heavy use of function composition (creating new functions from existing functions). For instance, we can rewrite <code>g(f(x))</code> as <code>h(x)</code>, where <code>h</code> is just the function composition of <code>g</code> and <code>f</code>. Composition works when the output of the first function <code>f</code> matches the input type of the next function <code>g</code>, and this works great in R when your <code>g</code> takes one argument. But what if your <code>g</code> needs multiple arguments? <code>g(f(x), other_args = ...)</code> might be more irritating to read in whatever context you are working in. Another way to handle this is by creating a partial function in place of <code>g</code>, use that function to precompose <code>h</code>, and we’ll be on our way.</p></li>
<li><p><strong>Abstraction</strong>. If a function takes more than one argument, is any single argument the “primary” argument? In some contexts this may <em>informally</em> be meaningful, but not in any formal sense. Consider our <code>unsafe_mean</code> example above. The <code>mean</code> function takes two arguments (it can actually take more, but let’s set them aside). We created an <code>unsafe_mean</code> function that fixes <code>na.rm</code>. But just as easily we could fixed the data argument <code>x</code>,</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">b_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(mean, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> b)</span></code></pre></div>
</div>
<p>and call this new function by passing <code>na.rm = TRUE</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_mean</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">na.rm =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 0.6</span></span></code></pre></div>
</div>
<p>…or by passing nothing at all! Which would use the base function’s defaults.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">b_mean</span>()</span>
<span id="cb12-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] NA</span></span></code></pre></div>
</div>
<p>This is obviously a weird example, but I am trying to get you to embrace that weird.</p>
<p>You can imagine other examples, like <code>lm</code> or <code>glm</code>. Are <code>lm</code> and <code>glm</code> functions of regression formulae, or are they functions of datasets? We could fix the formula and let the dataset vary…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">apply_reg <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">formula =</span> y <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> z <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> w)</span></code></pre></div>
</div>
<p>Or we could fix the dataset and let the formula vary:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">reg_on_penguins <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(lm, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> palmerpenguins)</span></code></pre></div>
</div>
<p>Both of these partial functions are valid. Mathematically it makes no difference.</p>
<p>One last weirdness. If I have a list <code>p</code> containing a mapping from <code>"a"</code> to <code>9</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1">p <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">a =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>)</span></code></pre></div>
</div>
<p>And I index this list to convert an <code>"a"</code> to a <code>9</code>…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">p[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>]]</span>
<span id="cb16-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 9</span></span></code></pre></div>
</div>
<p>then this mapping is sort of like a function. But what is the function, and what is the argument? Is <code>9</code> the value of a function <code>p</code> if I pass a string argument <code>"a"</code>? Or is <code>9</code> the value of a function <code>"a"</code> if I pass a list argument <code>p</code>? You can write functions intended to give you either brainfeel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1">index <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lst, k) lst[[k]]</span>
<span id="cb17-2">p <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">index</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb17-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 9</span></span>
<span id="cb17-4"></span>
<span id="cb17-5">key_into <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(k, lst) lst[[k]]</span>
<span id="cb17-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">key_into</span>(p)</span>
<span id="cb17-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 9</span></span></code></pre></div>
</div></li>
</ol>
<p>These abstractions and compositions let us be creative even while we are supposedly “restricting” the behavior of functions. The creativity comes not from “how many different argument configurations can I supply to this function” but rather “what meta-structures can I build by building functional routines that support certain patterns”. This brings us to some higher points about functions and functional programming in R.</p>
</section>
<section id="functions-are-objects" class="level2">
<h2 class="anchored" data-anchor-id="functions-are-objects">Functions are objects</h2>
<p>In R we like to say “everything is an object”. We can break this down into a couple important properties. First, we can ask about the properties of functions as if they were any other data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">attributes</span>(unsafe_mean)</span>
<span id="cb18-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $srcref</span></span>
<span id="cb18-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function(x) mean(x, na.rm = TRUE)</span></span></code></pre></div>
</div>
<p>We can pass functions as arguments to other functions. You may have seen this with <code>apply</code> functions or <code>purrr::map</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(mtcars, unsafe_mean) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb19-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $mpg</span></span>
<span id="cb19-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 20.09062</span></span>
<span id="cb19-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb19-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $cyl</span></span>
<span id="cb19-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 6.1875</span></span>
<span id="cb19-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb19-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $disp</span></span>
<span id="cb19-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 230.7219</span></span>
<span id="cb19-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb19-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $hp</span></span>
<span id="cb19-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 146.6875</span></span>
<span id="cb19-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb19-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $drat</span></span>
<span id="cb19-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 3.596563</span></span>
<span id="cb19-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb19-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $wt</span></span>
<span id="cb19-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 3.21725</span></span></code></pre></div>
</div>
<p>And we can return functions as values from other functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># take in a function f and return a "lifted" function that applies f to a list</span></span>
<span id="cb20-2">fmap <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(lst) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lapply</span>(lst, f)</span>
<span id="cb20-4">}</span>
<span id="cb20-5"></span>
<span id="cb20-6">map_unsafe_mean <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fmap</span>(unsafe_mean)</span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map_unsafe_mean</span>(mtcars) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span>
<span id="cb20-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $mpg</span></span>
<span id="cb20-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 20.09062</span></span>
<span id="cb20-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb20-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $cyl</span></span>
<span id="cb20-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 6.1875</span></span>
<span id="cb20-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb20-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $disp</span></span>
<span id="cb20-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 230.7219</span></span>
<span id="cb20-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb20-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $hp</span></span>
<span id="cb20-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 146.6875</span></span>
<span id="cb20-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb20-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $drat</span></span>
<span id="cb20-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 3.596563</span></span>
<span id="cb20-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb20-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## $wt</span></span>
<span id="cb20-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 3.21725</span></span></code></pre></div>
</div>
<p>In this example, <code>fmap</code> is a higher-order function (a function of a function). The value <code>fmap(unsafe_mean)</code> is itself a function. It waits for the user to pass it a list.</p>
<p>So you see, you can create many odd things by treating functions as first-class objects, letting functions be arguments and values to other functions, even thinking about non-function objects as behaving “sort of like functions”.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Suppose that I want to do this without reshaping/pivoting the data. If I reshape the data longer, I could create just one <code>geom_histogram</code> and map <code>fill</code> to the new <code>name</code> variable. But I actually don’t think reshaping the data is always a good idea. Reshaping can be unnecessarily expensive, and it is an instance where you are letting your plotting framework “flow backward” into your data organization. I consider that that backward flow a code smell in many cases, and I plan to discuss it in a future post.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>r</category>
  <guid>https://mikedecr.netlify.app/blog/partial_fns_ggplot/index.html</guid>
  <pubDate>Tue, 23 May 2023 05:00:00 GMT</pubDate>
</item>
<item>
  <title>The Mandelbrot set, in R, with recursion instead of iteration</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/mandelbrot_iterative_recursive/index.html</link>
  <description><![CDATA[ 




<section id="intro-iteration-and-recursion" class="level1">
<h1>Intro: Iteration and Recursion</h1>
<p>One fun lessons in the <a href="https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/index.html">Structure and Interpretation of Computer Programs</a><sup>1</sup> is the translation of functions between <em>iterative</em> and <em>recursive</em> approaches.</p>
<p>To show the difference between iterative and recursive procedures, let’s make a quick example where we raise a number to some (positive integer) power. We could implement an iterative approach in R using a for loop. We call this iterative because each pass through the loop is an “iteration”.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># power must be an integer &gt;= 0</span></span>
<span id="cb1-2">pow_iter <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, power) { </span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) }</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x) }</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the iterative part:</span></span>
<span id="cb1-6">    result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (i <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span>power) {</span>
<span id="cb1-8">       result <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> result <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x </span>
<span id="cb1-9">    } </span>
<span id="cb1-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(result)</span>
<span id="cb1-11">}</span></code></pre></div>
</div>
<p>Or we could do this with a recursive function. We call this function “recursive” because the function calls itself in its own implementation.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">pow_rec <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x, power) {</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) }</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(x) }</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># here be recursion</span></span>
<span id="cb2-5">    x <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow_rec</span>(x, power <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-6">}</span></code></pre></div>
</div>
<p>The recursive approach uses the fact that <img src="https://latex.codecogs.com/png.latex?x%5En%20=%20x%20%5Ctimes%20x%5E%7Bn%20-%201%7D"> to decompose your query into an expression that looks like <img src="https://latex.codecogs.com/png.latex?x%20%5Ctimes%20x%20%5Ctimes%20x%20%5Cldots%20%5Ctimes%20x"> which is evaluated all at once. And, I gotta say, recursion feels way slicker. We have just one powerful line of code that accomplishes as much as the four-line iterative approach, most of which was simply boilerplate for passing data in and out of the loop. The recursive implementation may be a bit of a brain-bender at first, but the more you use recursion, the more comfortable you get with it, and the more opportunities you find to use it productively.</p>
<p>For completeness, let’s verify that the approaches agree.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">example =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span>
<span id="cb3-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 117649</span></span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow_iter</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> example</span>
<span id="cb3-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pow_rec</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> example</span>
<span id="cb3-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span></code></pre></div>
</div>
<p><strong>This blog post will employ this duality between recursion and iteration to create images of the <a href="https://en.wikipedia.org/wiki/Mandelbrot_set"><em>Mandelbrot set</em></a> using R.</strong> Although there are <a href="https://www.r-bloggers.com/2014/12/the-mandelbrot-set-in-r/">plenty</a> of <a href="https://www.dandelbrot.com/post/the-mandelbrot-set-in-r/">other</a> blog <a href="https://cerebralmastication.com/2009/02/mandelbrot-set-in-r/">posts</a> that visualize the Mandelbrot set in R,<sup>2</sup> I have only seen them implement an iterative approach with a loop. But the Mandelbrot set is mathematically defined with recursion! So we ought to be able to implement a recursive approach that is, hopefully, more succinct and slick.<sup>3</sup></p>
<p>In the remainder of this post, we will quickly introduce the math behind the Mandelbrot set, define a recursive function to produce “Mandelbrot data”, and visualize the famous fractal image that the math produces.</p>
</section>
<section id="the-mandelbrot-set" class="level1">
<h1>The Mandelbrot Set</h1>
<p>If you have heard of the Mandelbrot set, it was probably because it is used to create a neat fractal image.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mikedecr.netlify.app/blog/mandelbrot_iterative_recursive/https:/web.archive.org/web/20230302155231im_/https:/upload.wikimedia.org/wikipedia/commons/thumb/2/21/Mandel_zoom_00_mandelbrot_set.jpg/644px-Mandel_zoom_00_mandelbrot_set.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">The Mandelbrot set fractal, Wikipedia via Archive.org</figcaption><p></p>
</figure>
</div>
<p>But the Mandelbrot set is not an image. It is a set of complex numbers. You remember complex numbers, right? A complex number <img src="https://latex.codecogs.com/png.latex?x%20+%20yi"> has a “real” component <img src="https://latex.codecogs.com/png.latex?x"> and an “imaginary” component <img src="https://latex.codecogs.com/png.latex?yi"> where the “imaginary number” <img src="https://latex.codecogs.com/png.latex?i"> is equal to <img src="https://latex.codecogs.com/png.latex?%5Csqrt%7B-1%7D">.</p>
<p>Formally, a complex number <img src="https://latex.codecogs.com/png.latex?c"> is a member of the Mandelbrot set if the function <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20z_%7Bn%20+%201%7D%20&amp;=%20z_%7Bn%7D%5E%7B2%7D%20+%20c%0A%5Cend%7Balign%7D"> initialized at <img src="https://latex.codecogs.com/png.latex?z%20=%200"> <strong>does not diverge to infinity</strong> as <img src="https://latex.codecogs.com/png.latex?n"> increases.</p>
<p>Let’s try it out with <img src="https://latex.codecogs.com/png.latex?c%20=%201">, which as a complex number is <img src="https://latex.codecogs.com/png.latex?1%20+%200i">. <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20z_%7Bn%20+%201%7D%20&amp;=%20z_%7Bn%7D%5E%7B2%7D%20+%20c%20%5C%5C%0A%20%20%20%201%20&amp;=%200%5E2%20+%201%20%5C%5C%0A%20%20%20%202%20&amp;=%201%5E2%20+%201%20%5C%5C%0A%20%20%20%205%20&amp;=%202%5E2%20+%201%20%5C%5C%0A%20%20%20%2026%20&amp;=%205%5E2%20+%201%20%5C%5C%0A%20%20%20%20677%20&amp;=%2026%5E2%20+%201%0A%5Cend%7Balign%7D"> When <img src="https://latex.codecogs.com/png.latex?c%20=%201"> the function explodes as <img src="https://latex.codecogs.com/png.latex?n"> increases, so 1 is <em>not</em> a member of the Mandelbrot set.</p>
<p>What about <img src="https://latex.codecogs.com/png.latex?i">, a.k.a. <img src="https://latex.codecogs.com/png.latex?0%20+%201i">? <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20z_%7Bn%20+%201%7D%20&amp;=%20z_%7Bn%7D%5E%7B2%7D%20+%20c%20%5C%5C%0A%20%20%20%20i%20&amp;=%200%5E2%20+%20i%20%5C%5C%0A%20%20%20%20-1%20+%20i%20&amp;=%20i%5E2%20+%20i%20%5C%5C%0A%20%20%20%20-1i%20&amp;=%20(-1%20+%20i)%5E2%20+%20i%20%5C%5C%0A%20%20%20%20-1%20+%201i%20&amp;=%20(-1i)%5E2%20+%20i%20%5C%5C%0A%20%20%20%20-1i%20&amp;=%20(-1%20+%201i)%5E2%20+%201%0A%5Cend%7Balign%7D"> For <img src="https://latex.codecogs.com/png.latex?i">, the function oscillates back and forth with <img src="https://latex.codecogs.com/png.latex?n">, so <img src="https://latex.codecogs.com/png.latex?i"> is a member of the Mandelbrot set.</p>
<p>Okay, some complex numbers diverge others don’t. Where does the fractal come from? The fractal image actually comes from sending an entire grid of complex numbers through the function, iterating the function a large number of times, and then coloring the points according to their values after <img src="https://latex.codecogs.com/png.latex?n"> iterations.</p>
<p>We will start working on that now.</p>
</section>
<section id="a-recursive-mandelbrot-function" class="level1">
<h1>A Recursive Mandelbrot Function</h1>
<p>Like I said above, this isn’t the first post to implement some Mandelbrot code in R. But we will implement it as a recursive function, which is a bit special. If we write it well, we should only have to write the main equation, <img src="https://latex.codecogs.com/png.latex?z_%7Bn%20+%201%7D%20=%20z_%7Bn%7D%5E%7B2%7D%20+%20c">, and an initial condition. Lo and behold, here is such a function called <code>mandelbrot</code>:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">mandelbrot <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(coord, iterations) {</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> (iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(coord)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initial condition</span></span>
<span id="cb4-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mandelbrot</span>(coord, iterations <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">^</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> coord</span>
<span id="cb4-4">}</span></code></pre></div>
</div>
<p>Let’s step through the code to make sure we understand how this works.</p>
<ul>
<li>The function takes a complex number <code>coord</code> and a total number of iterations <code>iterations</code>.</li>
<li>The first line declares an initial condition. When the number of iterations is 0, we return the <code>coord</code> itself. But why would the number of iterations ever be 0 if the whole point of this function is to iterate it some <code>n</code> number of times? Well…</li>
<li>The last line of the function calls the <code>mandelbrot</code> function itself, but on a decremented number of iterations. This gives us the recursive behavior: the value <img src="https://latex.codecogs.com/png.latex?z_%7Bn+1%7D"> is a function of <img src="https://latex.codecogs.com/png.latex?z_%7Bn%7D">. We just re-express this by saying the value <img src="https://latex.codecogs.com/png.latex?z_%7Bn%7D"> is a function of <img src="https://latex.codecogs.com/png.latex?z_%7Bn-1%7D">.</li>
</ul>
<p>We can confirm that this function gives us the same values as when we plugged in a few numbers above.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mandelbrot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">677</span></span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mandelbrot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> 1i, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>1i</span>
<span id="cb5-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] TRUE</span></span></code></pre></div>
</div>
<p>Great, now contrast this with the iterative approach <a href="https://www.r-bloggers.com/2014/12/the-mandelbrot-set-in-r/">here</a> in the function <code>mandelbrot_vectorized</code>, in the last code block between lines 53 and 57. There is some sense in which an iterative approach can be “easier” to read, to be sure. The procedure is laid bare, and you can see every step the computer takes to give you the result. The recursive procedure, on the other hand, requires your imagination to see how the computer builds your procedure implicitly.</p>
<p>But the recursive approach is “simpler” in a different sense, even if it isn’t “easier” in every sense.<sup>4</sup> There are no indexing variables, no indexing into arrays, no manually incrementing counters. There is only the function itself and an initial condition. The recursive function depends on <em>functionality</em> instead of syntax. Syntax is necessarily wrapped up in the particularities of a language, whereas functionality is mathematically abstract and transferable across languages. And I find that very appealing as someone who does a lot of functional programming in languages other than R.</p>
</section>
<section id="plot-the-results" class="level1">
<h1>Plot the results</h1>
<p>This post wouldn’t be complete if we didn’t plot the fractal. As it happens, the recursive implementation of the Mandelbrot function makes this whole process much simpler as well.</p>
<p>First, let’s make a grid of data (<code>x</code> and <code>y</code>), and a variable <code>C</code> where we represent <code>y</code> as an imaginary dimension.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>)</span>
<span id="cb6-3"></span>
<span id="cb6-4">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">crossing</span>(</span>
<span id="cb6-5">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length.out =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>),</span>
<span id="cb6-6">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> x</span>
<span id="cb6-7">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">C =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">complex</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">real =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">imag =</span> y)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb6-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 250,000 × 3</span></span>
<span id="cb6-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        x     y C           </span></span>
<span id="cb6-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;dbl&gt; &lt;dbl&gt; &lt;cpl&gt;       </span></span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1    -2 -2    -2-2.000000i</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2    -2 -1.99 -2-1.991984i</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3    -2 -1.98 -2-1.983968i</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4    -2 -1.98 -2-1.975952i</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5    -2 -1.97 -2-1.967936i</span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6    -2 -1.96 -2-1.959920i</span></span>
<span id="cb6-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7    -2 -1.95 -2-1.951904i</span></span>
<span id="cb6-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8    -2 -1.94 -2-1.943888i</span></span>
<span id="cb6-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9    -2 -1.94 -2-1.935872i</span></span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10    -2 -1.93 -2-1.927856i</span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ℹ 249,990 more rows</span></span></code></pre></div>
</div>
<p>One upside of the design of our <code>mandelbrot</code> function is that, at least in R, it is automatically vectorized. As long as <code>iterations</code> is an integer, we can pass data of various shapes to <code>coord</code> and get reasonable results. In this case, we pass the entire <code>C</code> column from our data frame as a vector.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> d <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-3">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mand =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mandelbrot</span>(C, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">iterations =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>),</span>
<span id="cb7-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">projected_value =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">abs</span>(mand))</span>
<span id="cb7-5">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>()</span>
<span id="cb7-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 250,000 × 5</span></span>
<span id="cb7-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        x     y C            mand     projected_value</span></span>
<span id="cb7-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;dbl&gt; &lt;dbl&gt; &lt;cpl&gt;        &lt;cpl&gt;              &lt;dbl&gt;</span></span>
<span id="cb7-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1    -2 -2    -2-2.000000i NaN-Infi               0</span></span>
<span id="cb7-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2    -2 -1.99 -2-1.991984i NaN+Infi               0</span></span>
<span id="cb7-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3    -2 -1.98 -2-1.983968i NaN+Infi               0</span></span>
<span id="cb7-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4    -2 -1.98 -2-1.975952i NaN-Infi               0</span></span>
<span id="cb7-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5    -2 -1.97 -2-1.967936i NaN+Infi               0</span></span>
<span id="cb7-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6    -2 -1.96 -2-1.959920i NaN+Infi               0</span></span>
<span id="cb7-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7    -2 -1.95 -2-1.951904i NaN-Infi               0</span></span>
<span id="cb7-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8    -2 -1.94 -2-1.943888i NaN-Infi               0</span></span>
<span id="cb7-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9    -2 -1.94 -2-1.935872i NaN+Infi               0</span></span>
<span id="cb7-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10    -2 -1.93 -2-1.927856i NaN+Infi               0</span></span>
<span id="cb7-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ℹ 249,990 more rows</span></span></code></pre></div>
</div>
<p>Notice we did another step to project <code>mand</code>, which is a complex number, into the positive reals again by taking its absolute value. We do another transformation <code>exp(-x)</code>, which, when we pass only positive numbers (hence <code>abs()</code>), will give us values between 0 and 1. Values on this scale will be much easier for continuous color palettes to differentiate in a graphic.</p>
<p>And now the finale: we plot the whole thing. <code>ggplot</code> makes this pretty easy with <code>geom_raster</code>, we just map the color of the pixel (the <code>fill</code> aesthetic) to <code>exp(-abs(mand))</code>. I won’t do much else to refine the graphic so you can see what’s going on.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-4">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> x, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> y) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_raster</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> projected_value), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">show.legend =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">coord_fixed</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb8-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_minimal</span>()</span></code></pre></div>
<div class="cell-output-display">
<p><img src="https://mikedecr.netlify.app/blog/mandelbrot_iterative_recursive/index_files/figure-html/unnamed-chunk-8-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A classic programming book. You can read it online for free as <a href="https://mitp-content-server.mit.edu/books/content/sectbyfn/books_pres_0/6515/sicp.zip/full-text/book/book.html">HTML</a> or as a <a href="https://web.mit.edu/6.001/6.037/sicp.pdf">PDF</a>↩︎</p></li>
<li id="fn2"><p>There is even an R package called <a href="https://cran.r-project.org/web/packages/mandelbrot/index.html"><code>mandelbrot</code></a> which although it dispatches the implementation to C, also uses <a href="https://github.com/blmoore/mandelbrot/blob/fdb7b75294317f2111b45b9bea05c04251750c64/src/mandelbrot.c#L40-L51">iteration</a>.↩︎</p></li>
<li id="fn3"><p>We will also use newer plotting tools to visualize the results—<code>ggplot</code> instead of <code>graphics::image</code> like the older posts.↩︎</p></li>
<li id="fn4"><p><a href="https://youtu.be/SxdOUGdseq4" class="uri">https://youtu.be/SxdOUGdseq4</a>↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>r</category>
  <guid>https://mikedecr.netlify.app/blog/mandelbrot_iterative_recursive/index.html</guid>
  <pubDate>Sat, 11 Mar 2023 06:00:00 GMT</pubDate>
</item>
<item>
  <title>Treating \(\mathrm{\LaTeX}\) like a programming language: the case of color-coded equations</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/latex_colors/index.html</link>
  <description><![CDATA[ 




<p><img src="https://latex.codecogs.com/png.latex?%5Cnewcommand%7Blatex%7D%7B%5Cmathrm%7B%5CLaTeX%7D%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Clatex"> can be a headache. The syntax is clunky. What seems like “normal” usage requires a lot of frustrating patterns. I see academics and other researchers complain about it, and I usually agree with the spirit of the complaints.</p>
<p>But I don’t always agree. I often feel like many researchers don’t get the most out of <img src="https://latex.codecogs.com/png.latex?%5Clatex"> (hereafter “LaTeX” or “TeX”). When I used to write more LaTeX in graduate school, I knew I didn’t. I mean, I was superficially <em>fine</em> at it. I was capable of injecting statistical results into documents, managing citations and cross-references, and so on. But TeX requires a lot of shoeleather work—boilerplate code to itemize and enumerate, manage environments, typeset math—and I didn’t know how to criticize that very well. Like many others, I would repeating my code a lot, get trapped in irritating patterns, and feel the <em>age</em> of the language constantly.</p>
<p>But you get older, you (hopefully) get better at programming, and you realize what you were being silly about. LaTeX is a programming language. You can do ordinary programming language things with it, like save variables and write functions. And then you can turn those variables and functions into interfaces that let you work with nicer abstractions with greater efficiency. And these interfaces can make LaTeX more joyful.</p>
<p>This has been <a href="https://twitter.com/mikedecr/status/1559721156130881536">on my mind</a> for a little while, but recently I was talking with <a href="https://twitter.com/adamjnafa/status/1565164364981620737">Jordan Nafa about color-coding different parts of some equations</a>. So that will be our example for this post: <strong>color-coding an equation</strong>. We require no deep LaTeX expertise, external packages, or complicated programming concepts. Just a little ordinary programming thinking to turn LaTeX’s built-in color tools into something more practical and friendly.</p>
<section id="color-fundamentals-in-latex" class="level2">
<h2 class="anchored" data-anchor-id="color-fundamentals-in-latex">Color fundamentals in LaTeX</h2>
<p>Like many things in LaTeX, the built-in experience of color-control is a little clunky. You can change text color with <code>\color{}</code>, which naturally takes some color argument. The language provides builtin keywords like <code>red</code> and <code>blue</code>, which are a bit harsh on the eyes, but others like <code>violet</code>, <code>teal</code>, and <code>maroon</code> are fine. But the color options aren’t the problem. The problem is the interface, which works like this.</p>
<p>Any time you change a color, you change it <em>indefinitely</em> (up to some scope change, more on that in a second). Here is an example:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb1-1">We start with some normal text.</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{red} And now the text is red indefinitely.</span></code></pre></div>
</div>
<p>When I render this in the browser:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7B%0A%20%20%20%20We%20start%20with%20some%20normal%20text.%0A%20%20%20%20%5Ccolor%7Bred%7D%20And%20now%20the%20text%20is%20red%20indefinitely.%0A%7D%0A"></p>
<p>You may have encountered similar behavior with altering text <em>size</em>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb2-1">We start with some normal text.</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\huge</span> And now the text is huge indefinitely.</span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7B%0A%20%20%20%20We%20start%20with%20some%20normal%20text.%0A%20%20%20%20%5Chuge%20And%20now%20the%20text%20is%20huge%20indefinitely.%0A%7D%0A"></p>
<p>We can extert some control over the “indefinite” application of these settings by introducing some scope, for instance with curly braces.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb3-1">We start with some normal text. </span>
<span id="cb3-2">{ <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{red} But the } redness is { <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{red} contained inside curly braces}.</span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7B%0AWe%20start%20with%20some%20normal%20text.%0A%7B%20%5Ccolor%7Bred%7D%20But%20the%20%7D%20redness%20is%20%7B%20%5Ccolor%7Bred%7D%20contained%20inside%20curly%20braces%7D.%0A%7D%0A"></p>
<p>This isn’t <em>the worst</em> but it doesn’t feel too comfortable. It would feel better to control colors more like this:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\red</span>{But the} redness is <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\red</span>{contained}</span></code></pre></div>
<p>which makes the whole experience feel more intuitive, function-oriented and declarative. We will work toward something that feels similar (not identical) to this.</p>
</section>
<section id="doing-better-with-an-equation-example" class="level2">
<h2 class="anchored" data-anchor-id="doing-better-with-an-equation-example">Doing better, with an equation example</h2>
<p>We will work with an example equation that has certain terms that we want make different colors. More specifically, we want to map certain “semantic features” of the equation to certain colors in a consistent way. And we would like the interface to be minimally burdensome; I don’t want to have to type (or <em>think</em>) too much to get nice effects.</p>
<p>Let’s meet our equation and its “semantics”. By “semantics” I mean that the terms in the equation have some additional <em>meaning</em> in addition to the math itself. In this example the semantics refer to the levels at which terms are indexed. We collect data on some <em>individuals</em> subscripted <img src="https://latex.codecogs.com/png.latex?i">, who are located within <em>groups</em> <img src="https://latex.codecogs.com/png.latex?g">, and measured across <em>time units</em> subscripted <img src="https://latex.codecogs.com/png.latex?t">. We model some outcome <img src="https://latex.codecogs.com/png.latex?y_%7Bit%7D"> as varying across individuals within groups and over time, <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bit%7D%20&amp;=%20%5Calpha%20+%20%5Cmu_%7Bi%7D%20+%20%5Cgamma_%7Bg%5Bi%5D%7D%20+%20%5Ctau_%7Bt%7D%20+%20%5Cvarepsilon_%7Bit%7D%0A%5Cend%7Balign%7D"> where <img src="https://latex.codecogs.com/png.latex?%5Calpha"> is a constant term, <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7Bi%7D"> is a term that is fixed for an individual <img src="https://latex.codecogs.com/png.latex?i"> across repeated observations, <img src="https://latex.codecogs.com/png.latex?%5Cgamma_%7Bg%5Bi%5D%7D"> is a group-specific that is fixed across time for all <img src="https://latex.codecogs.com/png.latex?i"> in group <img src="https://latex.codecogs.com/png.latex?g">, <img src="https://latex.codecogs.com/png.latex?%5Ctau_%7Bt%7D"> is a time-unit effect that is fixed for all individuals. and <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon_%7Bit%7D"> is random error. These units of measurement—units, groups, time periods—are the semantics that we want to map to colors.</p>
<p>We have already identified one problem: we don’t want colors to apply indefinitely. This means that in order to turn “off” a color, I either have to explicitly call <code>\color{black}</code> again, or I have to scope the color e.g.&nbsp;with curly braces.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% back to black</span></span>
<span id="cb5-2">y_{it} &amp;= <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\alpha</span> + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{violet} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\mu</span>_{i} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{black} </span>
<span id="cb5-3">          + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\gamma</span>_{g[i]} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\tau</span>_{t} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\varepsilon</span>_{it} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\\</span></span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% use scope</span></span>
<span id="cb5-6">y_{it} &amp;= <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\alpha</span> + {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{violet} <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\mu</span>_{i}} </span>
<span id="cb5-7">          + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\gamma</span>_{g[i]} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\tau</span>_{t} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\varepsilon</span>_{it}</span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bit%7D%20&amp;=%20%5Calpha%20+%20%5Ccolor%7Bviolet%7D%20%5Cmu_%7Bi%7D%20%5Ccolor%7Bblack%7D%20+%20%5Cgamma_%7Bg%5Bi%5D%7D%20+%20%5Ctau_%7Bt%7D%20+%20%5Cvarepsilon_%7Bit%7D%20%5C%5C%0A%20%20%20%20y_%7Bit%7D%20&amp;=%20%5Calpha%20+%20%7B%5Ccolor%7Bviolet%7D%20%5Cmu_%7Bi%7D%7D%20+%20%5Cgamma_%7Bg%5Bi%5D%7D%20+%20%5Ctau_%7Bt%7D%20+%20%5Cvarepsilon_%7Bit%7D%0A%5Cend%7Balign%7D"></p>
<p>Using the curly braces is definitely <em>safer</em> than <code>\color{black}</code>; I don’t want to assume that we always want to return to <code>black</code>. But managing the curly braces yourself can be cumbersome if you aren’t used to writing LaTeX that way already. I don’t write with that style, so I don’t want to burden myself with unusual patterns.<sup>1</sup></p>
<p>So to improve things, we will introduce a function that, at first, will not feel like much of an improvement. But we discuss it to highlight both <em>how</em> we can modify interfaces with pretty simple tools and <em>why</em> we may want to do that. So, consider a function called <code>setcolor</code>, which takes two arguments: a color code and the text you want apply the color to locally.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% notice the extra {} braces in the definition</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\newcommand</span>{<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">\setcolor</span>}[2]{ {<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\color</span>{#1} {#2}} } </span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">% apply function to the equation</span></span>
<span id="cb6-5">y_{it} &amp;= <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\alpha</span> + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\setcolor</span>{violet}{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\mu</span>_{i}} </span>
<span id="cb6-6">          + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\tau</span>_{t} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\varepsilon</span>_{it}</span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20%5Cnewcommand%7B%5Csetcolor%7D%5B2%5D%7B%20%7B%5Ccolor%7B#1%7D%20%7B#2%7D%7D%20%7D%0A%20%20%20%20y_%7Bit%7D%20&amp;=%20%5Calpha%20+%20%5Csetcolor%7Bviolet%7D%7B%5Cmu_%7Bi%7D%7D%20+%20%5Cgamma_%7Bg%5Bi%5D%7D%20+%20%5Ctau_%7Bt%7D%20+%20%5Cvarepsilon_%7Bit%7D%0A%5Cend%7Balign%7D"></p>
<p>Why do I say that this function may not feel like much of an improvement? It has <em>some</em> drawbacks: it really isn’t any “faster” to type <code>\setcolor{violet}{\mu_{i}}</code> than it is to type <code>{\color{violet} \mu_{i}}</code>. It actually has more characters and just as many curly braces. But it is <em>better</em> in at least two important respects that we should care about when we write code. One, we made the problem of locally scoping the color <em>inherent to the function</em> instead of being procedurally managed <em>ad hoc</em> outside of the function. This is good because it makes the whole thing more bug-proof. It also makes the interface feel more naturally function-like: we achieve a coherent result by calling a function with a predictable interface, then our work is done. No managing other special characters in the language as a side concern. It is easier to remember one thing (use a function) than it is to remember two things (use a function <em>oh and also manage the weird scope</em>). So we get a safer function with a more recognizable interface. Not so bad!</p>
<p>But we aren’t done there. We complete the interface by using this function to map semantics to colors directly. We create a function called <code>\unitfx{}</code> which applies the same color to any term in the equation that semantically refers to unit-level effects. Same for a functions called <code>groupfx{}</code>, <code>\timefx{}</code>, and so on. We also throw in a generic <code>\param{}</code> function for other terms.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\newcommand</span>{<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">unitfx</span>}[1]{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\setcolor</span>{violet}{#1}}</span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\newcommand</span>{<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">groupfx</span>}[1]{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\setcolor</span>{green}{#1}}</span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\newcommand</span>{<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">timefx</span>}[1]{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\setcolor</span>{orange}{#1}}</span>
<span id="cb7-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\newcommand</span>{<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">param</span>}[1]{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\setcolor</span>{maroon}{#1}}</span></code></pre></div>
</div>
<p>So as long as we define these color commands in one place, all the hard work is done. All downstream calls to these functions are simple. Just wrap a term in the equation inside of the function corresponding to its semantic.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode latex code-with-copy"><code class="sourceCode latex"><span id="cb8-1">y_{it} &amp;= <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\param</span>{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\alpha</span>} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\unitfx</span>{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\mu</span>_{i}}</span>
<span id="cb8-2">          + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\groupfx</span>{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\gamma</span>_{g[i]}} + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\timefx</span>{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\tau</span>_{t}}</span>
<span id="cb8-3">          + <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\param</span>{<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">\varepsilon</span>_{it}}</span></code></pre></div>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20%5Cnewcommand%7Bunitfx%7D%5B1%5D%7B%5Csetcolor%7Bviolet%7D%7B#1%7D%7D%0A%20%20%20%20%5Cnewcommand%7Bgroupfx%7D%5B1%5D%7B%5Csetcolor%7Bgreen%7D%7B#1%7D%7D%0A%20%20%20%20%5Cnewcommand%7Btimefx%7D%5B1%5D%7B%5Csetcolor%7Borange%7D%7B#1%7D%7D%0A%20%20%20%20%5Cnewcommand%7Bparam%7D%5B1%5D%7B%5Csetcolor%7Bmaroon%7D%7B#1%7D%7D%0A%20%20%20%20y_%7Bit%7D%20&amp;=%20%5Cparam%7B%5Calpha%7D%20+%20%5Cunitfx%7B%5Cmu_%7Bi%7D%7D%20+%20%5Cgroupfx%7B%5Cgamma_%7Bg%5Bi%5D%7D%7D%20+%20%5Ctimefx%7B%5Ctau_%7Bt%7D%7D%20+%20%5Cparam%7B%5Cvarepsilon_%7Bit%7D%7D%0A%5Cend%7Balign%7D"></p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So that’s it. Our solution meaningfully improves the color experience in LaTeX using just five lines of code: one to create a helper function and four more to create some color mappings. The helper function let us change the interface to color control in the <em>general case</em>. And the color mappings let us apply the new interface to create simple key-value pairs that map a semantic to a color. And bonus: the interface is also safer because managing the scope of a color modification requires no more work for the user.</p>
<p>We also do this without introducing any dependencies. We could still load outside packages to access more color values, but that choice doesn’t bear on the general interface or vice-versa. That modularity is a good design feature.</p>
<p>And all because we thought about a LaTeX problem like a programming problem.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Although I could totally see, for example, Lisp users feeling quite comfortable with that style. It feels more like the <code>(function arg1 arg2)</code> syntax.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>latex</category>
  <guid>https://mikedecr.netlify.app/blog/latex_colors/index.html</guid>
  <pubDate>Wed, 31 Aug 2022 05:00:00 GMT</pubDate>
  <media:content url="https://mikedecr.netlify.app/blog/latex_colors/eq.png" medium="image" type="image/png" height="37" width="144"/>
</item>
<item>
  <title>Obnoxious functional programming in R</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/fp_basics/index.html</link>
  <description><![CDATA[ 




<p>When people talk about “functional programming” in R, they usually mean two things.</p>
<ol type="1">
<li>Not doing for-loops. Many intermediate R users have a <em>thing</em> against for-loops because for-loops have a (not exactly fair<sup>1</sup>) reputation for being slow in R. Instead, these users advocate for <code>*apply</code> functions or <code>purrr::map</code>. This is called “functional programming” because we are applying a function to over some container of data instead of imperatively manipulating the data state directly.</li>
<li>More <a href="https://adv-r.hadley.nz/fp.html">advanced</a> R discussions refer to the fact that functions are first-class objects in R, so you can examine their properties and do operations on functions themselves, just like you could with other objects.</li>
</ol>
<p>[1] is definitely the more popular understanding than [2], which is a shame because functional programming outside of R goes way deeper, and get <em>way</em> weirder, than <code>apply(function, data)</code>. This post is an attempt to explain a little of that weirdness and implement it in R with some obnoxious examples.</p>
<p>Readers with more FP experience will recognize that this post isn’t the most rigorous. They may also realize that R is backed by a lot of functional ideas even if many users may not recognize or articulate those ideas readily. That’s fine if you know that stuff, but this post is meant to be light on the technicals.</p>
<section id="what-is-functional-programming" class="level2">
<h2 class="anchored" data-anchor-id="what-is-functional-programming">What is functional programming?</h2>
<p>Let’s do the Wikipedia thing. From the <a href="https://en.wikipedia.org/wiki/Functional_programming">functional programming</a> article:</p>
<blockquote class="blockquote">
<p>In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.</p>
</blockquote>
<p>You may be thinking, “That sounds pretty unremarkable. I already know that I write functions and apply them. Why do we need a name for this?”</p>
<p>Well… read on:</p>
<blockquote class="blockquote">
<p>It is a declarative programming paradigm in which function definitions are trees of expressions that map values to other values, rather than a sequence of imperative statements which update the running state of the program.</p>
</blockquote>
<p>There are a many information-dense pieces to that sentence that will be difficult to appreciate without a little more theory. But let’s try to break it apart, starting in the middle.</p>
<section id="functions-map-values-to-other-values" class="level3">
<h3 class="anchored" data-anchor-id="functions-map-values-to-other-values">“Functions map values to other values”</h3>
<p>You have probably seen function definition written like this, <img src="https://latex.codecogs.com/png.latex?%0Ay%20=%20a%20+%20bx%0A"> and we say that <img src="https://latex.codecogs.com/png.latex?y"> is a function of <img src="https://latex.codecogs.com/png.latex?x">. We can label the transformation of <img src="https://latex.codecogs.com/png.latex?x"> as <img src="https://latex.codecogs.com/png.latex?f"> and say <img src="https://latex.codecogs.com/png.latex?y%20=%20f(x)">. Easy!</p>
<p>But there is another way to write statements like: <span id="eq-map"><img src="https://latex.codecogs.com/png.latex?%0Af%20:%20X%20%5Cto%20Y%0A%5Ctag%7B1%7D"></span> which reads, “<img src="https://latex.codecogs.com/png.latex?f"> is a <em>map</em> from <img src="https://latex.codecogs.com/png.latex?X"> to <img src="https://latex.codecogs.com/png.latex?Y">”, where capital-<img src="https://latex.codecogs.com/png.latex?X"> and capital-<img src="https://latex.codecogs.com/png.latex?Y"> are <em>sets</em> of values from which little-<img src="https://latex.codecogs.com/png.latex?x"> and little-<img src="https://latex.codecogs.com/png.latex?y"> are drawn. Which is to say: <img src="https://latex.codecogs.com/png.latex?f"> is like a lookup table that outputs a value from <img src="https://latex.codecogs.com/png.latex?Y"> when it sees an input from <img src="https://latex.codecogs.com/png.latex?X">. In this example, the value of <img src="https://latex.codecogs.com/png.latex?y"> that it returns is equal to <img src="https://latex.codecogs.com/png.latex?a%20+%20(b%20%5Ctimes%20x)">.<sup>2</sup></p>
</section>
<section id="function-definitions-are-trees-of-expressions" class="level3">
<h3 class="anchored" data-anchor-id="function-definitions-are-trees-of-expressions">“Function definitions are <em>trees</em> of expressions …”</h3>
<p>Referring to functions as “trees” won’t make sense until we talk about <strong>function composition</strong> and <strong>associativity</strong>.</p>
<p>First, composition. If the notation in Equation&nbsp;1 is new to you, your mental picture of function composition probably looks like this. We can take two functions <img src="https://latex.codecogs.com/png.latex?f"> and <img src="https://latex.codecogs.com/png.latex?g">…</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y%20&amp;=%20f(x)%20%5C%5C%0A%20%20%20%20z%20&amp;=%20g(y)%0A%5Cend%7Balign%7D"></p>
<p>and put them together… <span id="eq-nested"><img src="https://latex.codecogs.com/png.latex?%20%5Cbegin%7Balign%7D%20z%20&amp;=%20g(f(x))%20%5Cend%7Balign%7D%20%20%5Ctag%7B2%7D"></span> and then we can represent that composition with a different symbol <img src="https://latex.codecogs.com/png.latex?h">, so that that <img src="https://latex.codecogs.com/png.latex?h(x)"> is equivalent to <img src="https://latex.codecogs.com/png.latex?g(f(x))">.</p>
<p>There’s nothing incorrect about that approach, but it is verbose. We actually don’t have to refer to any function arguments or values (x$, <img src="https://latex.codecogs.com/png.latex?y">, or <img src="https://latex.codecogs.com/png.latex?z">) to introduce <img src="https://latex.codecogs.com/png.latex?h">. Instead we can define <img src="https://latex.codecogs.com/png.latex?h"> in a “point-free” style, <span id="eq-composition"><img src="https://latex.codecogs.com/png.latex?%20h%20=%20g%20%5Ccirc%20f%20%20%5Ctag%7B3%7D"></span> where the symbol <img src="https://latex.codecogs.com/png.latex?%5Ccirc"> refers to function composition (in a leftward direction). The expression <img src="https://latex.codecogs.com/png.latex?g%20%5Ccirc%20f"> is a <em>new function</em>, which we can say aloud as “<img src="https://latex.codecogs.com/png.latex?g"> compose <img src="https://latex.codecogs.com/png.latex?f">” or “<img src="https://latex.codecogs.com/png.latex?g"> after <img src="https://latex.codecogs.com/png.latex?f">”. Because the composition is itself a function, we can pass it an argument: <img src="https://latex.codecogs.com/png.latex?(g%20%5Ccirc%20f)(x)"> would spit out the value <img src="https://latex.codecogs.com/png.latex?z">, just like in Equation&nbsp;2.</p>
<p>Okay, now associativity. Function composition is associative, which means compositions can be “grouped” in whatever way you want as long as you don’t change the ordering of the functions.</p>
<p>To demonstrate, let’s say we have three functions, <img src="https://latex.codecogs.com/png.latex?f">, <img src="https://latex.codecogs.com/png.latex?g">, and <img src="https://latex.codecogs.com/png.latex?j">, and we want to compose these functions. There are a few ways to do it:</p>
<ul>
<li>As one single chained composition: <img src="https://latex.codecogs.com/png.latex?j%20%5Ccirc%20g%20%5Ccirc%20f">, which if applied to <img src="https://latex.codecogs.com/png.latex?x"> would be equivalent to <img src="https://latex.codecogs.com/png.latex?j(g(f(x)))">.</li>
<li>Introduce <img src="https://latex.codecogs.com/png.latex?h%20=%20g%20%5Ccirc%20f">, and rewrite as <img src="https://latex.codecogs.com/png.latex?j%20%5Ccirc%20h">. This is the same as <img src="https://latex.codecogs.com/png.latex?j%20%5Ccirc%20(g%20%5Ccirc%20f)"> or <img src="https://latex.codecogs.com/png.latex?j(h(x))">.</li>
<li>Compose <img src="https://latex.codecogs.com/png.latex?j"> and <img src="https://latex.codecogs.com/png.latex?g"> into some <img src="https://latex.codecogs.com/png.latex?d"> and say <img src="https://latex.codecogs.com/png.latex?d%20%5Ccirc%20f">, which is the same as <img src="https://latex.codecogs.com/png.latex?(j%20%5Ccirc%20g)%20%5Ccirc%20f"> or <img src="https://latex.codecogs.com/png.latex?d(f(x))">.</li>
</ul>
<p>All of these expressions are equivalent.</p>
<p>Okay, recap. As long as the output of one map is <em>the same “type”</em> as the input to the some other map, we can compose those two functions. And we can take a series of compositions and group them in whatever way we want, as long as the input and output types conform.</p>
<p><strong>But how is this a “tree”?</strong> I will make a little graph with nodes and edges that shows the basic idea. Caveats up front that this will be pretty informal, but let’s say the functions are nodes, and the edges point in the direction of composition. Let’s say function <img src="https://latex.codecogs.com/png.latex?f"> takes two arguments, <img src="https://latex.codecogs.com/png.latex?a"> and <img src="https://latex.codecogs.com/png.latex?b">.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 134.00 116.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<title>
F
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-112 130,-112 130,4 -4,4"></polygon> <!-- a --> <g id="node1" class="node">
<title>
a
</title>
<ellipse fill="none" stroke="black" cx="27" cy="-90" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="27" y="-85.8" font-family="Times,serif" font-size="14.00">a</text> </g> <!-- f --> <g id="node2" class="node">
<title>
f
</title>
<ellipse fill="none" stroke="black" cx="63" cy="-18" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="63" y="-13.8" font-family="Times,serif" font-size="14.00">f</text> </g> <!-- a&#45;&gt;f --> <g id="edge1" class="edge">
<title>
a-&gt;f
</title>
<path fill="none" stroke="black" d="M35.35,-72.76C39.71,-64.28 45.15,-53.71 50.04,-44.2"></path> <polygon fill="black" stroke="black" points="53.23,-45.64 54.7,-35.15 47.01,-42.44 53.23,-45.64"></polygon> </g> <!-- b --> <g id="node3" class="node">
<title>
b
</title>
<ellipse fill="none" stroke="black" cx="99" cy="-90" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="99" y="-85.8" font-family="Times,serif" font-size="14.00">b</text> </g> <!-- b&#45;&gt;f --> <g id="edge2" class="edge">
<title>
b-&gt;f
</title>
<path fill="none" stroke="black" d="M90.65,-72.76C86.29,-64.28 80.85,-53.71 75.96,-44.2"></path> <polygon fill="black" stroke="black" points="78.99,-42.44 71.3,-35.15 72.77,-45.64 78.99,-42.44"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<p>But maybe the value of <img src="https://latex.codecogs.com/png.latex?a"> is the result of a function that itself takes two arguments, <img src="https://latex.codecogs.com/png.latex?p"> and <img src="https://latex.codecogs.com/png.latex?q">, and <img src="https://latex.codecogs.com/png.latex?b"> is the result of a function of <img src="https://latex.codecogs.com/png.latex?r">.</p>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 206.00 188.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 184)">
<title>
F
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-184 202,-184 202,4 -4,4"></polygon> <!-- b --> <g id="node1" class="node">
<title>
b
</title>
<ellipse fill="none" stroke="black" cx="171" cy="-90" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="171" y="-85.8" font-family="Times,serif" font-size="14.00">b</text> </g> <!-- f --> <g id="node2" class="node">
<title>
f
</title>
<ellipse fill="none" stroke="black" cx="135" cy="-18" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="135" y="-13.8" font-family="Times,serif" font-size="14.00">f</text> </g> <!-- b&#45;&gt;f --> <g id="edge1" class="edge">
<title>
b-&gt;f
</title>
<path fill="none" stroke="black" d="M162.65,-72.76C158.29,-64.28 152.85,-53.71 147.96,-44.2"></path> <polygon fill="black" stroke="black" points="150.99,-42.44 143.3,-35.15 144.77,-45.64 150.99,-42.44"></polygon> </g> <!-- a --> <g id="node3" class="node">
<title>
a
</title>
<ellipse fill="none" stroke="black" cx="99" cy="-90" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="99" y="-85.8" font-family="Times,serif" font-size="14.00">a</text> </g> <!-- a&#45;&gt;f --> <g id="edge2" class="edge">
<title>
a-&gt;f
</title>
<path fill="none" stroke="black" d="M107.35,-72.76C111.71,-64.28 117.15,-53.71 122.04,-44.2"></path> <polygon fill="black" stroke="black" points="125.23,-45.64 126.7,-35.15 119.01,-42.44 125.23,-45.64"></polygon> </g> <!-- p --> <g id="node4" class="node">
<title>
p
</title>
<ellipse fill="none" stroke="black" cx="27" cy="-162" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="27" y="-157.8" font-family="Times,serif" font-size="14.00">p</text> </g> <!-- p&#45;&gt;a --> <g id="edge3" class="edge">
<title>
p-&gt;a
</title>
<path fill="none" stroke="black" d="M41.57,-146.83C51.75,-136.94 65.52,-123.55 77.03,-112.36"></path> <polygon fill="black" stroke="black" points="79.47,-114.87 84.2,-105.38 74.59,-109.85 79.47,-114.87"></polygon> </g> <!-- q --> <g id="node5" class="node">
<title>
q
</title>
<ellipse fill="none" stroke="black" cx="99" cy="-162" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="99" y="-157.8" font-family="Times,serif" font-size="14.00">q</text> </g> <!-- q&#45;&gt;a --> <g id="edge4" class="edge">
<title>
q-&gt;a
</title>
<path fill="none" stroke="black" d="M99,-143.7C99,-135.98 99,-126.71 99,-118.11"></path> <polygon fill="black" stroke="black" points="102.5,-118.1 99,-108.1 95.5,-118.1 102.5,-118.1"></polygon> </g> <!-- r --> <g id="node6" class="node">
<title>
r
</title>
<ellipse fill="none" stroke="black" cx="171" cy="-162" rx="27" ry="18"></ellipse> <text text-anchor="middle" x="171" y="-157.8" font-family="Times,serif" font-size="14.00">r</text> </g> <!-- r&#45;&gt;b --> <g id="edge5" class="edge">
<title>
r-&gt;b
</title>
<path fill="none" stroke="black" d="M171,-143.7C171,-135.98 171,-126.71 171,-118.11"></path> <polygon fill="black" stroke="black" points="174.5,-118.1 171,-108.1 167.5,-118.1 174.5,-118.1"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<p>The tree lets us express composition and associativity in a different way: <img src="https://latex.codecogs.com/png.latex?f"> doesn’t really care how you compose or group the operations ahead of it, as long as the values that you pass are <img src="https://latex.codecogs.com/png.latex?a">-like and <img src="https://latex.codecogs.com/png.latex?b">-like.</p>
</section>
<section id="rather-than-a-sequence-of-imperative-statements-that-update-the-running-state." class="level3">
<h3 class="anchored" data-anchor-id="rather-than-a-sequence-of-imperative-statements-that-update-the-running-state.">“…Rather than a sequence of imperative statements that update the running state.”</h3>
<p>This is the really important stuff.</p>
<p>Most of the time when we do data analysis, we write code that updates the <em>state</em> of some data. Say I start with some <img src="https://latex.codecogs.com/png.latex?x">, and then I do functions <img src="https://latex.codecogs.com/png.latex?f">, <img src="https://latex.codecogs.com/png.latex?g">, and <img src="https://latex.codecogs.com/png.latex?j"> to it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">y <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(x)</span>
<span id="cb1-2">z <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(y)</span>
<span id="cb1-3">w <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">j</span>(z)</span></code></pre></div>
</div>
<p>There is some data <code>x</code> that we alter, in steps, by doing things to it, each time saving some data at some intermediate state.</p>
<p>The functional approach would be different. Instead of spending most of our time, energy, and keystrokes passing data around, we spend these resources writing functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">h <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(g, f)</span>
<span id="cb2-2">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(j, h)</span></code></pre></div>
</div>
<p>And only later (say, in some <code>main()</code> routine) do we apply our ultimately-composed functions to data. The data have to be acted on eventually, but we do it only after we compose a map from the data to some endpoint.</p>
<p>Stated a different way, when we do more imperative programming, the present state of <code>x</code> is always our concern. Our path from beginning to end requires us to leave <code>x</code> in some intermediate state at many different steps, and if the state of <code>x</code> is exposed along the way, there can be problems that mutate <code>x</code> into something you don’t want it to be. When we do functional programming, however, we write the recipe for what we will do to <code>x</code> if we ever encountered such an <code>x</code>. The roadmap is set ahead of time, so the intermediate state of <code>x</code> is obscured behind the functions that we compose. We can’t really get to the intermediate state because we aren’t supposed to be able to.</p>
<p>This might be hard to envision because we haven’t talked tangibly about functional programming interfaces in R yet, so let’s do that.</p>
</section>
</section>
<section id="functional-fundamentals-with-r" class="level2">
<h2 class="anchored" data-anchor-id="functional-fundamentals-with-r">Functional fundamentals, with R</h2>
<p>We saw a notational approach to function composition above that looked like this: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0Aa%20=%20(j%20%5Ccirc%20g%20%5Ccirc%20u)%0A%5Cend%7Balign%7D"> If we could do that in a computer, it might look like this:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">a <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(j, g, f)</span></code></pre></div>
</div>
<p>There are two important things to remember about this.</p>
<ol type="1">
<li>Function composition creates a <em>new function</em>. It does not immediately <em>evaluate</em> the function on any data. In the above example, <code>a</code> is the composition, and it is entirely ignorant of any data you may pass to it.</li>
<li>Function compositions are themselves composable, so we want a framework to compose a lot of functions all at once with whatever associative groupings we want. We saw above (with math) that we could compose an arbitrary sequence of functions and the result should be well-behaved (as long as their input and output types conform—more on that in a bit). We would like to achieve that behavior in the code as well.</li>
</ol>
<p>We start with a primitive operation to compose just two functions. We call it <code>compose_once</code>—it implements only one composition of a left-hand and a right-hand function.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># returns the new function: f . g</span></span>
<span id="cb4-2">compose_once <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f, g) {</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(...) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">g</span>(...))</span>
<span id="cb4-4">}</span></code></pre></div>
</div>
<p>Read this closely. <code>compose_once</code> takes two arguments, and those arguments are <em>functions</em>. We do not know or care what those functions are. We also return a new function, rather than some data value. That new function defines a recipe for evaluating the functions <img src="https://latex.codecogs.com/png.latex?f"> and <img src="https://latex.codecogs.com/png.latex?g"> in sequence on some unknown inputs <code>...</code>, whever it happens to come across those inputs—we didn’t pass any <code>...</code> yet. This is also intentional: composition does not care what the data are. It only knows how to evaluate functions in order.</p>
<p>This might feel weird at first, but it will give us legible behavior right from the start. For example, we often want to know how many unique elements are in some data object. In base R, we might ask <code>length(unique(x))</code>. The <code>dplyr</code> package provides a combined function <code>n_unique(x)</code>, but we haven’t invented <code>dplyr</code> yet, so we have to make <code>n_unique</code> ourselves:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># we save the function returned by compose_once</span></span>
<span id="cb5-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># no computation on data is done yet.</span></span>
<span id="cb5-3">n_unique <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose_once</span>(length, unique)</span>
<span id="cb5-4"></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># examine the object to convince yourself of this</span></span>
<span id="cb5-6">n_unique</span>
<span id="cb5-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function(...) f(g(...))</span></span>
<span id="cb5-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;environment: 0x12a20e5c0&gt;</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply the function on some data</span></span>
<span id="cb5-11">x <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">n_unique</span>(x)</span>
<span id="cb5-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 3</span></span></code></pre></div>
</div>
<p><code>compose_once</code> lets us compose two functions, but we want to compose an arbitary sequence of functions into one composition. So we extend this interface by performing a <em>reduction</em> across an array of functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pass vector fns = c(f1, f2, ..., fn)</span></span>
<span id="cb6-2">compose <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fns) {</span>
<span id="cb6-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">Reduce</span>(compose_once, fns, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">init=</span>identity)</span>
<span id="cb6-4">}</span></code></pre></div>
</div>
<p>If you aren’t familiar with reductions, they are an efficient trick to collapse an array (loosely speaking) of input values into one output value, accumulating at each step the results of some binary operation. If you want to learn more about reduction, follow this footnote.<sup>3</sup> We also supply an argument to <code>init</code>, which isn’t strictly necessary in this R example but is interesting (IMO) in the mathematical context of function composition, which I explain in this other footnote.<sup>4</sup></p>
<p>Let’s see it in action. Let’s do an additional step to convert <code>n_unique</code> into an English word.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># same as n_unique but convert to a word</span></span>
<span id="cb7-2">english_n_unique <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(english<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>english, length, unique))</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># apply to our vector x</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">english_n_unique</span>(x)</span>
<span id="cb7-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] three</span></span></code></pre></div>
</div>
<p>And just to underscore your confidence in the associativity of composition, we can exhaustively regroup these compositions without affecting the results.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(english<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>english, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(length, unique))))(x)</span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] three</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(english<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>english, length)), unique))(x)</span>
<span id="cb8-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] three</span></span></code></pre></div>
</div>
<section id="types-are-our-guide." class="level3">
<h3 class="anchored" data-anchor-id="types-are-our-guide.">Types are our guide.</h3>
<p>You may have seen online discussions about “strong typing”. Types are like representations of data in the computer. We have basic data types like short integers, long integers, characters, and strings. Types encode abstract features of some data that without caring about the data values themselves. Languages implement other data structures like lists, dictionaries, arrays, tuples, etc. that we can also call types for our purposes.</p>
<p>You may have seen some people discuss the “type flexibility” of R or Python as advantages. Well…sorry! Functional programming like strong types because strong types provide structure to function composition at scale. More specifically, two functions can be composed if the output type of one function matches the input type of the next function. If we can trust this fact, we can build really big, abstract creations out of function composition, maybe even creations that are so big and complicated that we struggle to keep track of it all in our brains. But these creations are <em>virtually guaranteed to work</em> as long as they are composed of functions with conforming input and output types.</p>
<p>Not coincidentally, the associativity of function composition is additionally helpful for API design. If we have to build a big, abstract structure, we always have the option to group some of the operations together if they perform a coherent and useful operation. Intermediate functions are more useful than intermediate state because at least an intermediate function is legible and potentially reusable. Chances are your intermediate data are not that legible or useful.</p>
<p>Let’s look at the “type roadmap” for the <code>english_n_unique</code> example. We started with a vector type and mapped to an <code>english</code> type. How did we know it would work? We can diagram the types. <img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign%7D%0A%20%20%20%5Cmathtt%7Bunique%7D%20&amp;:%20%5Cmathtt%7Bmany%7D%20%5Cto%20%5Cmathtt%7Bvector%7D%20%5C%5C%0A%20%20%20%5Cmathtt%7Blength%7D%20&amp;:%20%5Cmathtt%7Bmany%7D%20%5Cto%20%5Cmathtt%7Binteger%7D%20%5C%5C%0A%20%20%20%5Cmathtt%7Benglish::english%7D%20&amp;:%20%5Cmathtt%7Bmany%7D%20%5Cto%20%5Cmathtt%7Bvector%7D%0A%5Cend%7Balign%7D%0A"> We know that <code>unique</code> takes objects of various types (which I represent as <code>many</code> to say “this function has many methods for different data types”) and returns a vector of unique elements. We know that length takes <code>many</code> and returns its integer length, and that should work for a vector input. And <code>english::english</code> turns <code>many</code> objects into <code>english</code> type, which ought to work for an integer input. But we know that these operations should compose because we can know that we can pass a vector to <code>unique</code>, a vector to <code>length</code>, and an integer to <code>english::english</code>. Stated differently, if I know the type behavior of each function, I know the type behavior of the compositions. That is an extremely useful and powerful foundation for building big things.</p>
</section>
</section>
<section id="something-bigger-means-within-groups" class="level2">
<h2 class="anchored" data-anchor-id="something-bigger-means-within-groups">Something bigger: means within groups</h2>
<p>This is where we really start to see the difference between typical “imperative” programming and functional programming “trees”. Let’s take something we commonly do in R, calculate means within groups of data, and do it with our functional tools. We will write this in a functional setup that, I admit, is sort of an ugly interface. But the point isn’t to write a perfect interface, it’s to demonstrate what it’s like to be functional. So let’s roll with some ugly code for a while.</p>
<p>Let’s take the <code>mtcars</code> data frame…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mtcars, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb</span></span>
<span id="cb9-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4</span></span>
<span id="cb9-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4</span></span>
<span id="cb9-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1</span></span>
<span id="cb9-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1</span></span>
<span id="cb9-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2</span></span></code></pre></div>
</div>
<p>…and calculate the mean of each variable as a new data frame with one row per group. We want to be able to specify the group on the fly.</p>
<p>We want to chart a course through this problem that composes small, re-usable steps on well-defined types. Here is my plan:</p>
<ol type="1">
<li>define a function that maps a data frame of raw data to a data frame of column means.</li>
<li>define a function that applies <em>any other function</em> to grouped data.</li>
<li>compose a function that implements a split-apply-combine which is the composition of the above steps.</li>
</ol>
<section id="means-for-a-data-frame." class="level3">
<h3 class="anchored" data-anchor-id="means-for-a-data-frame.">1. Means for a data frame.</h3>
<p>We create a function by composing the following functions that map the following types:</p>
<ul>
<li><code>colMeans</code>: data frame <img src="https://latex.codecogs.com/png.latex?%5Cto"> vector</li>
<li><code>as.list</code>: vector <img src="https://latex.codecogs.com/png.latex?%5Cto"> list</li>
<li><code>tibble::as_tibble</code>: list <img src="https://latex.codecogs.com/png.latex?%5Cto"> data_frame</li>
</ul>
<p>You can see how these functions take us incrementally from data frame, to vector, to list, back to data frame. So we know that this composition should work before we ever test it on data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>as_tibble, as.list, colMeans))</span></code></pre></div>
</div>
<p>Testing it on the full data:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means</span>(mtcars)</span>
<span id="cb11-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1 × 11</span></span>
<span id="cb11-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb11-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb11-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  20.1  6.19  231.  147.  3.60  3.22  17.8 0.438 0.406  3.69  2.81</span></span></code></pre></div>
</div>
</section>
<section id="apply-a-function-over-groups" class="level3">
<h3 class="anchored" data-anchor-id="apply-a-function-over-groups">2. Apply a function over groups</h3>
<p>Remember, functional programming hasn’t been invented yet, so we can’t simply do his with <code>lapply</code>. We can, however, reimplement <code>lapply</code> knowing what we know about functional programming.</p>
<p>Let’s create an function that takes any function <code>f</code> and an iterable object <code>l</code>, and returns a list.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">apply_on_elements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(l, f) {</span>
<span id="cb12-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># initialize an empty list</span></span>
<span id="cb12-3">    v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(l))</span>
<span id="cb12-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assign f(x) for each x in l</span></span>
<span id="cb12-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(l)) {</span>
<span id="cb12-6">        v[[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(l[[x]])</span>
<span id="cb12-7">    }</span>
<span id="cb12-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(v)</span>
<span id="cb12-9">}</span></code></pre></div>
</div>
<p>Notice, this function takes <em>two</em> objects as arguments and returns one object. In order to nicely compose it with other functions that take and return only <em>one</em> object, I want a way to reduce the arguments required when I call it. This will look a little weird, but I am going to create a common object in functional programming called a <em>partial function</em> or <em>curried function</em>. A partial function is a function that has some of its arguments fixed ahead of time. Let’s define it before I explain further:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">partial_apply <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb13-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply_on_elements</span>(x, f)</span>
<span id="cb13-3">}</span></code></pre></div>
</div>
<p>So <code>partial_apply</code> takes a function <code>f</code> and returns a <em>new</em> function. That new function applies <code>f</code> to some iterable object <code>x</code> to return a list. But the function isn’t evaluated; it is only created, because I never provide an <code>x</code> in the outer function. The user has to pass <code>x</code> to evaluate the partial at a later time.</p>
<p>Here we use this tool to create a partial <code>length</code>, which we apply to some <code>x</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">lens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial_apply</span>(length)</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># examine, it's a function</span></span>
<span id="cb14-4">lens</span>
<span id="cb14-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function(x) apply_on_elements(x, f)</span></span>
<span id="cb14-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;environment: 0x12a354c18&gt;</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lens</span>(x)</span>
<span id="cb14-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[1]]</span></span>
<span id="cb14-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb14-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb14-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[2]]</span></span>
<span id="cb14-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb14-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb14-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[3]]</span></span>
<span id="cb14-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb14-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb14-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[4]]</span></span>
<span id="cb14-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span>
<span id="cb14-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## </span></span>
<span id="cb14-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [[5]]</span></span>
<span id="cb14-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## [1] 1</span></span></code></pre></div>
</div>
<p>We see more of that delayed evaluation behavior. This lets us create a function that applies our earlier <code>means</code> to groups of data.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial_apply</span>(means)</span>
<span id="cb15-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## function(x) apply_on_elements(x, f)</span></span>
<span id="cb15-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;bytecode: 0x1388538c0&gt;</span></span>
<span id="cb15-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## &lt;environment: 0x138a84eb0&gt;</span></span></code></pre></div>
</div>
</section>
<section id="apply-our-partial-function-to-data." class="level3">
<h3 class="anchored" data-anchor-id="apply-our-partial-function-to-data.">3. Apply our partial function to data.</h3>
<p>Rather, create a function that <em>would</em> do that, if it were evaluated.</p>
<p>This function should turn a data frame into an iterable collection of groups (like a list), apply <code>means</code> to each element of that collection, and return a final data frame that re-merges the collection. Here’s how we map these steps from type to type.</p>
<ul>
<li><code>split</code>: pair of (data frame, vector) <img src="https://latex.codecogs.com/png.latex?%5Cto"> list</li>
<li><code>partial_apply(means)</code>: list <img src="https://latex.codecogs.com/png.latex?%5Cto"> list</li>
<li><code>dplyr::bind_rows</code>: list <img src="https://latex.codecogs.com/png.latex?%5Cto"> data frame</li>
</ul>
<p>The composition of all these steps creates a function that eats a data frame and returns a data frame.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1">means_by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>bind_rows, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial_apply</span>(group_means), split))</span></code></pre></div>
</div>
</section>
<section id="put-it-all-together." class="level3">
<h3 class="anchored" data-anchor-id="put-it-all-together.">Put it all together.</h3>
<p>The code below retraces our steps. Step (1) creates our <code>means</code> function. Step (2) creates some functional infrastructure to apply functions over iterable objects, which isn’t the kind of thing we would ordinarily have to mess with as end-users. And step (3) composes our <code>means</code> function with the iteration tools to make our eventual result.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. small function to be applied</span></span>
<span id="cb17-2">means <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>as_tibble, as.list, colMeans))</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. infrastructure layer:</span></span>
<span id="cb17-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you can see why these would be generally useful for many problems</span></span>
<span id="cb17-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2a. reimplement *-apply()</span></span>
<span id="cb17-7">apply_on_elements <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(l, f) {</span>
<span id="cb17-8">    v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">vector</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mode =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"list"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">length</span>(l))</span>
<span id="cb17-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> (x <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq_along</span>(l)) {</span>
<span id="cb17-10">        v[[x]] <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(l[[x]])</span>
<span id="cb17-11">    }</span>
<span id="cb17-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">return</span>(v)</span>
<span id="cb17-13">}</span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2b. partial apply</span></span>
<span id="cb17-15">partial_apply <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(f) {</span>
<span id="cb17-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">apply_on_elements</span>(x, f)</span>
<span id="cb17-17">}</span>
<span id="cb17-18"></span>
<span id="cb17-19"></span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. interface layer</span></span>
<span id="cb17-21">means_by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>bind_rows, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial_apply</span>(means), split))</span></code></pre></div>
</div>
<p>Again, given that step (2) is rebuilding the wheel, it’s pretty impressive how little code goes into steps (1) and (3) to achieve the end results. The interface currently isn’t as succinct as <code>dplyr</code> grouping and summarizing, but remember, functional programming hasn’t been invented yet. But moreover, you can start to imagine how tools like partials can be stacked to create tools that are essentially as powerful as <code>dplyr</code> with nice interfaces too, even if those interfaces are different from the imperative steps you are used to.</p>
<p>Let’s apply the ultimate function, <code>means_by</code>, to various groups in <code>mtcars</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb18-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 11</span></span>
<span id="cb18-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb18-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb18-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  26.7     4  105.  82.6  4.07  2.29  19.1 0.909 0.727  4.09  1.55</span></span>
<span id="cb18-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  19.7     6  183. 122.   3.59  3.12  18.0 0.571 0.429  3.86  3.43</span></span>
<span id="cb18-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  15.1     8  353. 209.   3.23  4.00  16.8 0     0.143  3.29  3.5</span></span>
<span id="cb18-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>vs)</span>
<span id="cb18-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 × 11</span></span>
<span id="cb18-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb18-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb18-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  16.6  7.44  307. 190.   3.39  3.69  16.7     0 0.333  3.56  3.61</span></span>
<span id="cb18-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  24.6  4.57  132.  91.4  3.86  2.61  19.3     1 0.5    3.86  1.79</span></span>
<span id="cb18-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>am)</span>
<span id="cb18-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 2 × 11</span></span>
<span id="cb18-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb18-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb18-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  17.1  6.95  290.  160.  3.29  3.77  18.2 0.368     0  3.21  2.74</span></span>
<span id="cb18-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  24.4  5.08  144.  127.  4.05  2.41  17.4 0.538     1  4.38  2.92</span></span>
<span id="cb18-20"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>gear)</span>
<span id="cb18-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 11</span></span>
<span id="cb18-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb18-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb18-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  16.1  7.47  326. 176.   3.13  3.89  17.7 0.2   0         3  2.67</span></span>
<span id="cb18-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  24.5  4.67  123.  89.5  4.04  2.62  19.0 0.833 0.667     4  2.33</span></span>
<span id="cb18-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  21.4  6     202. 196.   3.92  2.63  15.6 0.2   1         5  4.4</span></span>
<span id="cb18-27"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>carb)</span>
<span id="cb18-28"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 6 × 11</span></span>
<span id="cb18-29"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb18-30"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb18-31"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  25.3  4.57  134.   86   3.68  2.49  19.5   1   0.571  3.57     1</span></span>
<span id="cb18-32"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  22.4  5.6   208.  117.  3.70  2.86  18.2   0.5 0.4    3.8      2</span></span>
<span id="cb18-33"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  16.3  8     276.  180   3.07  3.86  17.7   0   0      3        3</span></span>
<span id="cb18-34"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 4  15.8  7.2   309.  187   3.60  3.90  17.0   0.2 0.3    3.6      4</span></span>
<span id="cb18-35"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 5  19.7  6     145   175   3.62  2.77  15.5   0   1      5        6</span></span>
<span id="cb18-36"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 6  15    8     301   335   3.54  3.57  14.6   0   1      5        8</span></span></code></pre></div>
</div>
</section>
<section id="ending-notes-on-the-tidyverse" class="level3">
<h3 class="anchored" data-anchor-id="ending-notes-on-the-tidyverse">Ending notes on the tidyverse</h3>
<p>Now that we have invented functional programming, we can better appreciate how tidyverse tools leverage functional infrastructure to make nice APIs, even if those APIs feel way less hardcore-functional than the example we just created.</p>
<p><strong>The pipe operator</strong>. You may have thought to yourself, composing “left” sure is harder to read than composing “right” like the pipe operator. First, functional programming hadn’t been invented yet, so you can’t blame me for not knowing about the pipe operator. Second, creating a composition function that reads more “linearly” is easy with one extra step: reversing the direction of the <code>Reduce</code>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1">pipe <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(fns) {</span>
<span id="cb19-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reverse the order of fns before composing</span></span>
<span id="cb19-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">compose</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rev</span>(fns))</span>
<span id="cb19-4">}</span></code></pre></div>
</div>
<p>Now we can write our <code>means_by</code> function with more linear recipe that reminds us more of tidyverse code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb20-1">means_by <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pipe</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(split, <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial_apply</span>(means), dplyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>bind_rows))</span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">means_by</span>(mtcars, mtcars<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cyl)</span>
<span id="cb20-3"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 3 × 11</span></span>
<span id="cb20-4"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb</span></span>
<span id="cb20-5"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb20-6"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 1  26.7     4  105.  82.6  4.07  2.29  19.1 0.909 0.727  4.09  1.55</span></span>
<span id="cb20-7"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 2  19.7     6  183. 122.   3.59  3.12  18.0 0.571 0.429  3.86  3.43</span></span>
<span id="cb20-8"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 3  15.1     8  353. 209.   3.23  4.00  16.8 0     0.143  3.29  3.5</span></span></code></pre></div>
</div>
<p><strong>Partial functions</strong>. The <code>partial_apply</code> function might have been the weirdest-feeling step in the earlier example. But if you squint at it, you realize that this is sort of what the tidyverse does with tidy evaluation. Whenever you pipe a data frame to <code>mutate</code> or <code>filter</code> and so on, and you write expressions on unquoted variables, those arguments are (in a way) creating new partial functions. There is also delayed evaluation of that function: the unquoted expressions are not evaluated on the spot, but instead are translated to create the partial function you actually want. It is that translated/partial function that actually is evaluated when you pass it your data frame.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Most of the time, loops in R are slow because people are doing unwise things with them.↩︎</p></li>
<li id="fn2"><p>You may have assumed that <img src="https://latex.codecogs.com/png.latex?x"> and <img src="https://latex.codecogs.com/png.latex?y"> are numbers and that the operations <img src="https://latex.codecogs.com/png.latex?+"> and <img src="https://latex.codecogs.com/png.latex?%5Ctimes"> refer to the addition and multiplication of numbers. It’s fine if you made those assumptions, but it wasn’t necessary. <img src="https://latex.codecogs.com/png.latex?X"> and <img src="https://latex.codecogs.com/png.latex?Y"> could be other sets containing god-knows-what, and there are many kinds of operations that follow “algebraic” patterns akin to addition and subtraction. But we leave algebraic data types for another day.↩︎</p></li>
<li id="fn3"><p>You may have seen a reduction in an operation like <code>max()</code>—for an array of numbers, recursively check to see if <code>left</code> is greater than <code>right</code>, passing the winner to the next iteration as <code>left</code>. In this case, however, the array we are collapsing is full of functions rather than, say, numbers. And the operation we apply as we accumulate is <code>compose_once(left, right)</code> rather than <code>left &gt; right</code>. The result of the reduction is a function that encodes the composition of all functions in <code>fns</code> from left to right.↩︎</p></li>
<li id="fn4"><p>The role of an initialization in a reduction is to handle an identity condition: how do we handle “empty” values along the reduction without affecting the output. Stated differently, what value can we pass to ensure a “no-op” when the reduction is applied, which can also be used as an initial value to <code>left</code>. For example, if we reduce an array of numbers by <em>addition</em>, the initialization would be the value <code>0</code>, because applying <code>+ 0</code> to any number gives you the original number. Same with multiplication and the value <code>1</code>. When we are reducing <em>functions</em> by <em>composing</em> them, we use the identity function. Not surprisingly, the identity function simply returns the function arguments unaffected: <code>identity(x)</code> gives you <code>x</code>. For function composition, <code>compose(f, identity)</code> is equal to <code>compose(identity, f)</code> is equal to <code>f</code>. Now you’re programmin with abstractions!↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>r</category>
  <guid>https://mikedecr.netlify.app/blog/fp_basics/index.html</guid>
  <pubDate>Wed, 17 Aug 2022 05:00:00 GMT</pubDate>
</item>
<item>
  <title>Replication code should be more usable.</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/usable_repos/index.html</link>
  <description><![CDATA[ 




<section id="why-do-so-many-research-projects-replication-archives-hurt" class="level2">
<h2 class="anchored" data-anchor-id="why-do-so-many-research-projects-replication-archives-hurt">Why do so many research projects’ replication archives hurt?</h2>
<p>My mind has been on <strong>replication archives</strong> lately. I often go digging in other peoples’ projects for data to practice some new statistical skill or another. And I have been digging in <em>my own</em> projects lately to refactor some code for a dormant academic project. In both of these situations I am interfacing with some else’s code (me today ≠ me in the past), and in both situations I am having a bad time.</p>
<p>The academic community has been increasingly interested in replication archives since they realized that a lot of public research is, err, systematically untrustworthy. Formal requirements (from journals) and informal pressures (from other researchers) in academia are increasingly requiring authors to prepare these repositories for new projects, which seems good on the whole. But if you ever go digging in these republication archives, you quickly realize that just because authors provide data and code doesn’t mean that the experience is all that helpful. But why? You can see the data, maybe the code runs without errors…What’s the problem?</p>
<p>My main argument is that the code was not really designed to be understood or manipulated by other people. If it were, the code would not look the way it does.</p>
<p>Now, I’m not an academic anymore, so don’t have much stake in this. But I do write quantitative research code in a collaborative environment at work all the time, with the intention that my code will be consumed and repurposed by others. As it turns out, writing code under these conditions changes how you write that code, improves the reliability of your work, and has positive effects on the community in which your code is deliberated and consumed. This blog post will attempt to distill some of the things I have learned into discrete, attainable lessons for writing academic research code.</p>
<p>Before I get too concrete though, I make a normative argument for caring about this at all. Changing the way code is written takes effort, and I want to argue why that effort would be justified.</p>
</section>
<section id="getting-oriented" class="level2">
<h2 class="anchored" data-anchor-id="getting-oriented">Getting oriented</h2>
<section id="this-isnt-about-good-code-vs.-bad-code." class="level3">
<h3 class="anchored" data-anchor-id="this-isnt-about-good-code-vs.-bad-code.">This isn’t about “good” code vs.&nbsp;“bad” code.</h3>
<p>Like you, I don’t have a defensible theory about what makes code Good for any enduring understanding of Good. “Good” code seems like a contested and highly contextual idea. Code may have “good properties”, but certain features of code design also present important trade-offs, so goodness is understood relative to our goals. So maybe we should start by talking about what we want academic code to do for us.</p>
</section>
<section id="what-is-the-point-of-the-code-repository-for-academic-projects" class="level3">
<h3 class="anchored" data-anchor-id="what-is-the-point-of-the-code-repository-for-academic-projects">What is the point of the code repository for academic projects?</h3>
<p>I will discuss two broad models for code repositories, an <em>archive</em> model and a <em>product</em> model. I am making these up as I go, but you will get the idea.</p>
<p><strong>The archive model.</strong> This is what most academic repositories are doing right now, I would guess. We call these code repositories “replication archives” because that’s what we think we want them to do: replicate and archive. The model is focused on the “validity” of the code—does it correctly reproduce the results in the writing, tables, and figures (replication) in a robust and enduring way (archiving).</p>
<p>These are important goals, but focusing exclusively on them has some predictable side-effects. The repositories end up serving as an audit trail for the paper, so the code is designed around the <em>rhetoric of the paper</em> instead of around the operations that the code performs. We see files named things like <code>01_setup</code>, <code>02_clean-data</code>, <code>03_model</code>, <code>04_tables-figs</code>, <code>05_robustness</code> and so on. Even supposing that all of the code runs just fine, all we can really do with the code is rebuild the paper exactly as it is. If you could draw a web of all the interlocking pieces of this project, it would be a long, single strand from start to finish, highly dependent from one script to the next (perhaps intended to be run in the same R/Python session), with no feasible way to swap out any components for other components or modify them in isolation. And crucially, if we wanted to use the data or some of the code from this project for some other purpose, we would have to mangle the project in order to extract the components we wanted.</p>
<p><strong>The product model.</strong> The product model organizes its code as if to offer it as a product for someone else to use. The code is a key part of the research package, and researchers care that it is a good experience, just as they care about the quality of their writing. An important assertion here is that there is value in the code even if the paper did not exist. If a project proposes a method to measure or estimate a key variable, those methods are valuable outside of the context of the written paper, so part of the <em>product</em> of the project is to make these tools available and usable for other researchers to benefit from. Projects that propose a new model make this model available for others to use with a practical interface. Indeed, there may be a notion of <em>interface</em> as distinct from <em>infrastructure</em>; the code that drives the project at a high level is uniform and understandable, and the ugly code that does heavy lifting might be encapsulated away from the interface. And better yet, the important infrastructure pieces are modularly designed: they may combine at the locus of the project, but the components can exist without reference to one another and could be exchanged for other components that perform similar functions.</p>
</section>
<section id="increasing-the-amount-of-shared-re-used-code-would-be-good-for-research-credibility-and-knowledge-accumulation" class="level3">
<h3 class="anchored" data-anchor-id="increasing-the-amount-of-shared-re-used-code-would-be-good-for-research-credibility-and-knowledge-accumulation">Increasing the amount of shared / re-used code would be good for research credibility and knowledge accumulation</h3>
<p>Posting code online is not the same as making it usable. I suspect many social scientists put code online without really wanting others to dig into it. But there are real services that academics could provide for each other more regularly if they were more generous with the way their code is designed. Political scientists in particular use a lot of the same data sources and do a lot of similar transformations on it, but why all the wasted effort? I quite admire Steven V. Miller’s <a href="http://svmiller.com/peacesciencer/ms.pdf"><code>peacesciencer</code></a> package for R, a set of tools whose rationale seems to be that there’s no sense in having everybody duplicate each other’s work to shape the data into common formats for analysis in political science. I gotta say, I agree.</p>
<p>But it doesn’t stop at broad-based datasets or data-shaping tools. Think about every paper you have ever read that proposes a new way to measure something. Did those authors provide a code module to do the appropriate calculations on new data of appropriate shape? Did those authors provide an interface for validating these measures against alternatives? I suspect that in most cases the answer is no. The authors may put their code online, but it isn’t online so that you can use it. Not really.</p>
<p>I don’t want to point fingers, so I will use some examples from my own academic work to show that I, too, wasn’t thinking enough about this. In my dissertation, I built a group-level measurement model to estimate latent political ideology in partisan groups at subnational units of aggregation, and I wrote a series of Stan files to iterate on a few approaches to it. Other projects I have seen before and after I finished my thesis have built similar models. Did I package my models into a tool that they could use? No, I did not. I also implemented a reweighting method for aggregated survey data that I first saw in a paper from nearly a decade ago. This is probably a pretty broadly applicable correction for similar data, but did I provide a little module for others to apply the same calculations on data that wasn’t exactly my own? Nah. I designed a Bayesian implementation of the <a href="https://www.cambridge.org/core/journals/american-political-science-review/article/abs/explaining-causal-findings-without-bias-detecting-and-assessing-direct-effects/D11BEB8666E913A0DCD7D0B9872F5D11">Acharya, Blackwell, and Sen formulation of sequential-<em>g</em> estimator</a> that addresses some of the things that Bayesians would care about in situations like that, and I would even say I was pretty proud of it. But I wasn’t proud enough to share a generic version that others could use and adapt for their purposes.</p>
<p>You get the idea.</p>
<p>It just makes me worry that when we advertise our work as tools that others could use, we do not really mean it. I worry that phrases like “We propose a method…”, or “we provide an approach…” are only things we were trained to say to make it <em>sound</em> like we are contributing tools for the community. But we are not doing the work that would make those tools available for others. The code that goes into the paper repository is for ourselves, because the goal is getting our paper over the finish line. The code is just another part of the game.</p>
<p>There recently was a <a href="https://statmodeling.stat.columbia.edu/2022/03/04/biology-as-a-cumulative-science-and-the-relevance-of-this-idea-to-replication/">post on the Gelman blog</a> that stuck out to me about cumulative science and re-using each other’s work. Here is an excerpt that gives you the idea:</p>
<blockquote class="blockquote">
<p>How could a famous study sit there for 20 years with nobody trying to replicate it? […] Pamela said this doesn’t happen as often in biology. Why? Because in biology, when one research team publishes something useful, then other labs want to use it too. Important work in biology gets replicated all the time—not because people want to prove it’s right, not because people want to shoot it down, not as part of a “replication study,” but just because they want to use the method. So if there’s something that everybody’s talking about, and it doesn’t replicate, word will get out.</p>
<p>The way she put it is that biology is a cumulative science.</p>
</blockquote>
<p>Thinking about how this applies to our code, it is clear that there is more than a vague moral value to posting usable code for others. There is scientific value. And it is interesting to me that after all the commotion about replication and <a href="https://www.nature.com/articles/s41597-022-01143-6">running code without errors</a>, there is comparatively little discussion about the scientific value of the code outside of the narrow, narrow context of the paper it is written for.</p>
</section>
</section>
<section id="what-can-be-done" class="level2">
<h2 class="anchored" data-anchor-id="what-can-be-done">What can be done?</h2>
<p>Now that I am done complaining, we can talk about recommendations. I will focus mainly on two concepts, interface and modularity, from a couple different angles. Interface refers to the way other people use your tools. Modularity describes how those tools are combined for easier development (for your own benefit) and exporting (for others’ benefit).</p>
<section id="interfaces-for-living-projects-not-memorials-to-dead-projects" class="level3">
<h3 class="anchored" data-anchor-id="interfaces-for-living-projects-not-memorials-to-dead-projects">Interfaces for living projects, not memorials to dead projects</h3>
<p>Whenever I want to download a project’s data and code, I <em>only</em> want to get it from a version control platform like Github. I want to fork the project, see the history, get the intended file structure, and maybe even contribute to the project by opening issues or pull requests. I <a href="https://twitter.com/rmkubinec/status/1514142461949583361">never</a> want to go to Harvard Dataverse. I’m sure Dataverse was a great idea when it first hit the scene, but by today’s standards, it feels like it is chasing yesterday’s problems, like the problem of “pure replication”. But I think the credibility problems in social science warrant more than old-world-style replication. We should be looking for platforms that accommodate and encourage sharing, re-use, mutual contribution, and stress-testing by others.</p>
</section>
<section id="interface-vs.-infrastructure" class="level3">
<h3 class="anchored" data-anchor-id="interface-vs.-infrastructure">Interface vs.&nbsp;Infrastructure</h3>
<p>This is a pretty common distinction you hear about in software communities. It isn’t much discussed in academic research circles.</p>
<p>I will explain by way of example: Think about the <code>tidyverse</code> packages in R, or just the <code>dplyr</code> and <code>tidyr</code> packages. These packages provide an interface to useful data manipulations on data frames. These are operations on <em>abstractions</em> of your data—an abstraction in the sense that the functions <strong>do not have to know or care what is in those data frames</strong> in order to operate on them. The packages provide a <em>uniform</em> interface; they take a data frame as an input and return a data frame as an output, and the semantics are similar across functions. This makes the operations <em>composable</em>, which is jargon for “the operations can be reordered and combined to achieve powerful functionality”. The same basic principles are true for other tools in the tidyverse like <code>stringr</code>, <code>forcats</code>, <code>purrr</code>, and so on. They employ different abstractions for data organized at different levels (strings, factors, and lists respectively), but the emphasis on uniformity and composability is always there.</p>
<p>So that’s the “interface” layer. Now, what about the “infrastructure” or the implementation of these functions? Do you know <em>anything</em> about how these functions are actually written? And would it really matter if you did? The infrastructure isn’t what you, the user, care about. What matters is that the tools provide a simple way to perform key tasks with your code without bogging you down in the implementation details.</p>
<p>Compare this to the way we write research code. There is usually no distinction between interface and infrastructure whatsoever. A lot of the time, we keep all of our nasty and idiosyncratic data-cleaning code right next to our analysis and visualization. On a good day, we may smuggle the data-cleaning code into a different file, but that doesn’t make a huge difference because the flow of the project is still mostly linear from raw data to analysis. The user cannot really avoid spending time in the darkest corners of the code.</p>
<p>To be fair, it isn’t necessary that an academic project’s code base should produce an end result as concptually gorgeous as tidyverse tools are. But there are probably some intertwined components in the research project that could be separated into interface and infrastructure layers somehow, and readers who really want to investigate the infrastructure are free to do so.<sup>1</sup></p>
<p>Thinking again about a paper that proposes a new way to measure a key variable, or a new method to analyze some data: could those methods not be divided into an interface to access the method and an infrastructure that does the heavy lifting somewhere else? Wouldn’t you be more likely to use and re-use a tool like that? Wouldn’t it be more likely that if the method has a problem, we would have an easier time discovering and fixing it? Wouldn’t that look more like the iterative, communal scientific process that we wish we had?</p>
</section>
<section id="little-functions-good-and-bad" class="level3">
<h3 class="anchored" data-anchor-id="little-functions-good-and-bad">Little functions, good and bad</h3>
<p>Should you make an interface by writing more functions? Annoyingly, it depends. One way to make an interface more legible to users is package annoying routines into functions that describe what you’re accomplishing. This is nominally easy to implement, but it isn’t always easy to design well. And the design considerations present plenty of trade-offs with <a href="https://twitter.com/mikedecr/status/1524899107135016967">no obvious guiding theory</a>.</p>
<p>Take a halfway concrete example. You have a dataset of administrative data on many individuals, and the dataset has a field for individuals’ names. Your task is to clean these names in some way.</p>
<p>You choose to use some combination of regular expressions and <code>stringr</code> to do this. But how do you implement this operation in the code? One way is to create a new variable like…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">new_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb1-2">    df, </span>
<span id="cb1-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> </span>
<span id="cb1-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(...[manipulation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> here]...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(...[manipulation <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> here]...) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb1-6">        [...]</span>
<span id="cb1-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace</span>(...[final manipulation here]...)</span>
<span id="cb1-8">)</span></code></pre></div>
</div>
<p>…and this works fine. But if you wanted to change the way this name-cleaning is done, not only do you have to do surgery directly on a data pipeline, but you can’t test your new implementation without re-running this mutate step over and over (which may be only one step of an expensive, multi-function pipe chain, but that is a separate, solvable issue).</p>
<p>Consider instead the possibility of writing a function called <code>format_names</code> that implements your routine. Now your data pipeline looks like this…</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">new_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(df, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">name =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">format_names</span>(name))</span></code></pre></div>
</div>
<p>Well, should you do that? The routine is now encapsulated, so if you need to do it more places, you can call the function without rewriting the steps.<sup>2</sup> This makes your routine unit-testable: does it clean the patterns you want it to clean (and you are, of course, limited by the patterns you can anticipate). It also makes it a little easier to change your implementation in one location and achieve effects in many places without doing surgery to your data pipeline. Maybe it also makes it easy to move this step in your data pipeline around, which is good.</p>
<p>And what are the drawbacks? Well, you no longer know what the function is doing without hunting down the implementation, and it’s possible that the implementation is idiosyncratic to your project instead of being broadly rules-based. In general, encapsulating code into a function makes it easier to “drive” code, but it doesn’t inherently have any effect on whether your code is operating at a useful level of abstraction. Nor does it have any obvious effect on whether the interface you design for one function is at all related to the interface you create for other functions—uniformity makes your functions easier to use and combine for powerful results. If you aren’t careful, you might write ten different functions that don’t share a uniform abstraction or interface, so now it takes more effort for you to remember how your functions work than it does to write it out using stringr. After all, stringr is already built on familiar abstractions: stringr don’t know what your string is, and it does not care. All it knows is that it has functions with similar semantics for doing operations on strings.</p>
<p>So, you have to think about what you want to accomplish if you want to have an effective design.</p>
</section>
<section id="more-modules-fewer-pipelines" class="level3">
<h3 class="anchored" data-anchor-id="more-modules-fewer-pipelines">More modules, fewer pipelines</h3>
<p>So far I have been a little incredulous toward the idea that your code should be a “pipeline” for your data. This is because pipelines are often in conflict with modularity: the principle of keeping things separate, independent, and interchangeable. A lot of academic projects are lacking in it.</p>
<p>It is difficult at first to realize the drawbacks of non-modular pipeline organization because, especially with tidyverse tools, chaining many things together to do big things is the primary benefit. When <code>dplyr</code> and <code>tidyr</code> first start clicking for you, you immediately begin chaining tons of operations together to go from A to B without a ton of code. But as you iterate on the analysis, which requires breaking and changing things in your code, it can suddenly be very cumbersome to find and fix broken parts. This is because you have twisted all of the important steps together! You wrote the code in such a way that steps that do not depend on one another in principal now have to be organized and executed in a strict order. And now the fix for one breakage leads you to break something else because the steps in your pipeline are not abstracted. It is just nice to avoid problems like this.</p>
<p>To be clear, this is not the tidyverse’s fault. The tidyverse is an exemplar of modular design. The problem is that you tried to string too much together without thinking about how to keep things smartly separated. We should be asking ourselves questions like,</p>
<ul>
<li>What <em>operation</em> (read: function) do I need to do here, regardless of what my particular <em>data</em> look like? That is, think more about functionality and less about <em>state</em>.</li>
<li>What can be separated? For instance, do I need the analysis of these 3 different data sources to happen in the same file? Or are they unrelated to the point where the analyses don’t have to be aware of one another in any way? Again, functionality without state.</li>
<li>What can be encapsulated? Suppose I convince myself that the analyses of my 3 different data sources don’t have to be aware of one another, but maybe there are some tools I can define that could be useful in each analysis. Perhaps I should encapsulate those tools under a separate file (read: a module!) and then import that module whenever I need it. This lets me both keep things separate without repeating the same steps in many places. We should be skeptical of encapsulation for its own sake—it isn’t always necessarily helpful—but in this case it helps us separate functionality from state.</li>
<li>Correspondingly, what can be <em>exported</em> to other files in this project, or to other users who might want to use only that part? This is probably helpful to remember for cleaned data, repeated data manipulation tools, a new model that you build, and more.</li>
</ul>
<p>If more pieces of your project are separable, interchangeable, and exportable, it becomes much easier to share little pieces of your project with other researchers.</p>
</section>
<section id="theres-organization-and-then-theres-organization" class="level3">
<h3 class="anchored" data-anchor-id="theres-organization-and-then-theres-organization">There’s organization, and then there’s organization</h3>
<p>We know that our code should be organized, but it is easy to organize code ineffectively. Something we see a lot in research code is an organizational structure that is perfectly <em>discernible</em> but not exactly <em>useful</em>. I have created plenty of impeccably “organized” but unhelpful repositories.</p>
<p>One discernible but not-very-useful organizational pattern is to name your files as steps along a data analysis pipeline: <code>01_setup</code>, <code>02_clean-data</code>, <code>03_model</code>, <code>04_tables-figs</code>, <code>05_robustness</code>, and so on. Again, guilty. This setup doesn’t help the researcher keep themselves “organized” if every problem they have to solve is tangled together in one bucket ambiguously labeled “data cleaning”. And it doesn’t help anyone consuming the project understand or modify which pieces of the code are responsible for which functionality.</p>
<p>But if you are being a good citizen—designing modularity into your code, creating a useful interface, dividing functionality across files, separating analyses that don’t depend on one another, and so on—the pipeline organization will not be the dominant feature. It will naturally be replaced by a layout that reflects the concepts in the code, not the rhetorical contours of a research paper. The code is not a paper, and a paper is not its code.</p>
<p>To be sure, you cannot kill every little pipeline; data always need to be read, shaped, and analyzed. But building your code on effective abstractions lets you write smaller pipelines that are quicker from start to finish, conceptually simpler, and untangled from other independent ingredients in your project. The ultimate goal is usable code, not killing pipelines. It just happens that small, minimal pipelines are more usable than gigantic, all-encompassing pipelines.</p>
</section>
<section id="judicious-usage-of-literate-programming" class="level3">
<h3 class="anchored" data-anchor-id="judicious-usage-of-literate-programming">Judicious usage of “literate programming”</h3>
<p>Many researchers agree that statistical output should be algorithmically injected into research writeups to ensure the accuracy of the reporting. This is the <em>real</em> reason to use document prep systems like Rmarkdown or (increasingly) Quarto: not for the math typesetting.</p>
<p>But it is also a <em>problem</em> if the statistical work is so intertwined with the manuscript that they cannot be severed in the code. I myself have written plenty of “technically impressive” Rmarkdown documents that are actually are fragile Jenga towers of tangled functionality.</p>
<p>This is a pretty easy lesson though. The .Rmd file shouldn’t be the place where important, novel analysis happens. That should happen elsewhere, and your paper should be epiphenomenal to it.</p>
</section>
<section id="whos-looking-at-your-code" class="level3">
<h3 class="anchored" data-anchor-id="whos-looking-at-your-code">Who’s looking at your code?</h3>
<p>You learn a lot by having other people make suggestions to you about the way your code is structured. I suspect most academic projects, even those with multiple co-authors, don’t feature much code criticism or review of any kind. Outsourcing code tasks to graduate students is great for developing their skills, but if you (the person reading this) are the veteran researcher, they would also benefit from your advice. The student and your project will be better for it.</p>
</section>
<section id="dont-propose-methods.-provide-them." class="level3">
<h3 class="anchored" data-anchor-id="dont-propose-methods.-provide-them.">Don’t propose methods. Provide them.</h3>
<p>I have said this already, but I wanted to sloganize it.</p>
</section>
</section>
<section id="better-code-vs.-the-academy" class="level2">
<h2 class="anchored" data-anchor-id="better-code-vs.-the-academy">Better code vs.&nbsp;the Academy</h2>
<p>This section could be its own blog post, but I am not an academic anymore and do not want to spend too much energy arguing about stuff that I intentionally left behind. But in case you are thinking about the following things, I just want you to know what I see you, I hear you, but I think these are the questions you have to answer for yourselves.</p>
<ul>
<li><strong>Writing better code will not help my paper get published.</strong> Yeah, that sucks, right? Why is that? If we can agree that more usable code will make it easier to share tools among researchers, test-drive the contributions of other researchers, and bolster the credibility of your field overall, why does your publication model think that it’s a waste of your time as a researcher?</li>
<li><strong>This all sounds very hard, and I am not a software engineer.</strong> You shouldn’t have to be a software engineer if you do not want to be. What I <em>do</em> wish is for your field to sustain broader collaboration where you have a team of people who are good at different things so your field can put out more reliable products. But many fields care about superstar researchers. I do not care about superstar researchers.</li>
</ul>
</section>
<section id="what-we-havent-said" class="level2">
<h2 class="anchored" data-anchor-id="what-we-havent-said">What we haven’t said</h2>
<p>Here’s a recap of all the things we did not mention about replication / archiving discussions:</p>
<ul>
<li>Packaging environments and dependencies</li>
<li>Relatedly, containerization</li>
<li>Solutions for long-term archiving</li>
<li>Commenting code / other documentation</li>
</ul>
<p>I think these problems are important to varying degrees. I mean, I am not as concerned about containerization, but you are free to be. But these issues are more commonly discussed than the design, usability, and shareability of code. So I didn’t talk about them.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It is also worth noting that merely <em>hiding</em> the messiness behind a function isn’t really the best way to proceed. What you want to achieve by separating the implementation is some kind of abstraction away from the particularities of your data into something simpler and more principled. See this entertaining talk on the difference between <a href="https://www.youtube.com/watch?v=SxdOUGdseq4">“easy” and “simple”</a>.↩︎</p></li>
<li id="fn2"><p>Better yet, if the patterns you need to clean about the names are the same things you would need to clean about other strings, you could design the function to be abstracted away from “names” altogether.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <guid>https://mikedecr.netlify.app/blog/usable_repos/index.html</guid>
  <pubDate>Sun, 15 May 2022 05:00:00 GMT</pubDate>
  <media:content url="https://mikedecr.netlify.app/blog/usable_repos/featured.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Highly modular blogging with Blogdown</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/modular_blog/index.html</link>
  <description><![CDATA[ 




<p>When I finished graduate school, I tore down my website.</p>
<p>For a handful of reasons. I no longer needed a website that cried out, “Help me, I’m finishing my PhD and I need to escape.” I didn’t need to showcase unpublished papers, teaching resources, or old blog posts that I had grown detached from. It was time for a clean reset.</p>
<p>But if you work with Blogdown, you know that starting over is laborious. Not that Blogdown isn’t great, because it is. It’s that, when you’re a finicky person like me, setting up a website with the right balance of capable features, pleasant aesthetics, and a principled codebase is legitimately challenging. I was encountering the same familiar challenges over and over.</p>
<p><strong>For example, the site’s Hugo theme.</strong> I would take a lot of Hugo themes for test-drives. Hugo advertizes themes as if they were completely modular with respect to your <code>/content/</code> folder. For most themes, this is a lie. Themes usually want too many bespoke variables or file structures in your website <code>content</code>. Some amount of this is okay, but it comes at a cost. If you really want to take a theme for a spin, I would find it easier to create an entirely new <code>blogdown::new_site()</code> than to change my theme in an existing site.</p>
<p><strong>Except now you’re dragging the same files around your computer all over again.</strong> Ugh, this new website directory needs your blog source files, your website-level <code>.Rprofile</code> that controls Blogdown’s build behaviors, the jpg/png image files that you use to brand yourself online, etc… And maybe these files need to go in different folders or be given different file names from the previous theme. After a while, these files no longer have a single authoritative “home” on your computer, and you may have multiple conflicting(!) versions of these files across your various experimental website folders.</p>
<p><strong>And then there’s reproducibility.</strong> Even after lugging around all the same files to the new site, good luck getting your blog posts to render if your package library has changed since they were written, which it probably has. Danielle Navarro <a href="https://blog.djnavarro.net/posts/2021-09-30_on-blogging-reproducibly/">wrote about reproducibility in Rmarkdown blogging</a>, and argues convincingly that the best way to protect your <code>.Rmarkdown</code> posts from this rebuilding risk is to create a <em>dedicated package library for each separate blog post</em> using <code>renv</code>. This sounds intense at first, but the underlying principle is simple, which makes it a good solution to a difficult problem.</p>
<p>This post will continue that pattern: intense at first, but well-founded, solutions for difficult problems.</p>
<section id="what-this-post-is-about-modularity" class="level2">
<h2 class="anchored" data-anchor-id="what-this-post-is-about-modularity">What this post is about: modularity</h2>
<p>What we want is a principled and robust approach for managing the many interlocking components of your website. Specifically, we explore the <strong><em>modularity</em> of the elements in your website.</strong> I take the view that your website is a collection of modular components that are better managed independently, <strong>with different Git repositories for the different site components.</strong> Yes, managing your website with multiple repositories. Stay with me.</p>
<p>The modules that compose your website include your theme, your blog posts, your Blogdown build preferences (implemented in your <code>.Rprofile</code>), and maybe more. These modular components <em>come together</em> at the nexus of the website, but as I will argue, these components should not <em>belong to</em> the website. Why not? Because these components can be re-used across different websites or substituted with other similar components. Hugo already flirts with this idea in its core design by separating the <code>/theme/</code> directory from the <code>/content/</code> directory, as if to say, “these components can be combined but do not depend on one another.” This post takes an opinionated stance that <strong>such modularity is a good idea</strong> and should be assertively extended to other components of your Blogdown site. That said, I make no assertion that this stance is objectively correct—only that it has been useful enough for me that I wanted to share some thoughts about the principles and processes at work. (You should do what works for you!)</p>
<p>Modularity as a software philosophy is one thing, but implementing it in code requires technical solutions. This post will discuss how to achieve this using <strong>Git submodules,</strong> an intermediate-level Git construct that, if you’re like me, is somewhat familiar but somewhat intimidating. In short, a Git submodule is a repository-within-a-repository. It has its own version history that is distinct from the “parent” repository. In this post, I provide a simple tour of submodules and how they can be used to structure your website workflow. We will recast our website as the “primary” repository, and we import other modular site components (like our blog posts) as Git submodules. In case you host your blog on Netlify, I will also discuss how to ensure that Netlify can build your site successfully.</p>
<section id="aside-some-terminology" class="level3">
<h3 class="anchored" data-anchor-id="aside-some-terminology">Aside: some terminology</h3>
<p>This discussion will involve plenty of concepts that sound similar to one another but should be understood as distinct things. I want to flag these concepts so that we understand each other better.</p>
<p><strong>Directory vs.&nbsp;repository.</strong> A directory is a folder on your computer that holds files. A (Git) repository tracks changes to files. For many projects, the project’s root directory is entirely managed by one repository, so the distinction between the two may be blurred. When Git submodules are involved, this is no longer true. Your website directory will be managed by one repository, and sub-directories below your website will be managed by other repositories.</p>
<p><strong>Website vs.&nbsp;module.</strong> The <em>website</em> is the entire project that puts your website online. Your website will contain various <em>modules</em> that combine to build the entire project. Your blog posts will be considered a module (or several modules, depending on your implementation). Your theme is another module. Think of modules as building blocks for your website that can be stacked, swapped out, and so on.</p>
<p><strong>Parent repository (for the website) vs.&nbsp;child repository (for the module), a.k.a. “submodule”.</strong> The website and the module will be versioned by separate repositories. We can refer to the over-arching project repo (the website) as the “parent” repo and the module repo as the “child” repo. A “Git submodule” is a Git construct that is overlaid onto this relationship between repositories. A repository, in isolation, is simply a repository. But if you import a repository into another project as a dependency, Git designates the dependency as a “submodule” to the parent repository, and this affects our Git workflow as a result. I explain all of that below.</p>
</section>
</section>
<section id="websites-are-a-collection-of-modules" class="level2">
<h2 class="anchored" data-anchor-id="websites-are-a-collection-of-modules">Websites are a collection of modules</h2>
<p>Modules are like little building blocks, and your website has plenty of them. Setting aside any formal definition of what would mathematically be considered a “module”, let’s crudely define them as structures in your website that are agnostic to the content of other structures. We may be able to replace modules with other modules, or remove modules entirely, without affecting the core function of other modules.</p>
<p>Here are some examples from my own workflow. I consider my blog posts, Hugo theme, and blogdown build settings (in my site-level <code>.Rprofile</code>) as modular components within the website as a whole, and I version each component with its own separate repository. Here is how I justify this view for each component:</p>
<ul>
<li><p><strong>Blog posts</strong>: The content of a blog post is completely separable from the website repo. We can take a blog post and locate it in a different website, and the blog post should still be meaningful (and reproducible) unto itself. Many blogdown users remake their websites and carry their old blog posts to the new sites, which shows that the blog content doesn’t functionally depend on the website.</p>
<p>It turns out that, for blog posts, modularity and reproducibility are pretty closely related. In her discussion of blog reproducibility, Danielle Navarro touched on the principle that a blog should be <a href="https://blog.djnavarro.net/posts/2021-09-30_on-blogging-reproducibly/">“encapsulated” or “isolated”</a> away from the broader website to robustify the blog against other dependencies. By insisting that blog posts also be modular, not only is the blog protected from the website’s computational environment, we can control each post independently of one another, move posts around across contexts, and remove posts entirely without side-effects.</p>
<p>This also affects how we treat the blog post’s dependencies. Suppose that your post includes an analysis on a data file that you read from disk. This file should belong to your blog post—and be versioned by that blog post’s Git repository—not your website. This means you should keep all of these files in the blog post directory, and forget about the website’s <code>/static/</code> folder except for files that rightfully belong <em>to the website</em>.</p></li>
<li><p><strong>Hugo theme</strong>: Hugo is designed such that the <code>/content/</code> of a website (specified in markdown files) is more-or-less independent of its <code>/theme/</code>. The same theme can be used for multiple websites, and a single website can (in theory<sup>1</sup>) swap out one theme for another. Because themes are managed with Git repositories already, you can pull theme updates from their remote repositories without overwriting any bespoke theme customizations specified in your <code>/layouts/</code> folder.</p>
<p>Blogdown complicates this somewhat. When you install a theme with <code>blogdown::install_theme()</code>, Blogdown actually deletes the theme’s <code>.git</code> directory. (At least, this was my experience.) This is probably for ease-of-use among users who would not appreciate having to manage the theme as a submodule. But we are enthusiastic seekers of modularity, so we want to keep that upstream remote connection alive. As such, I installed my site’s Hugo theme using Git submodule operations instead of installing it with <code>blogdown::install_theme()</code>.</p></li>
</ul>
<ul>
<li><strong>The website <code>.Rprofile</code> file</strong>: You may have a global .Rprofile file, but it is an increasingly common Blogdown workflow staple to set up a website-specific .Rprofile to control <a href="https://bookdown.org/yihui/blogdown/global-options.html">Blogdown’s build behavior</a>. How is this a module? Your blogdown build preferences are probably not specific to this website repository. Instead, it is likely that your preferences reflect your workflow for blogging <em>in general</em> and could be equally applicable to any other website repo you create or manage. If you change your blogdown workflow in a way that bears on this .Rprofile file, that change may affect all of your blogdown websites equally! Managing these .Rprofiles separately for each website would be inefficient and error-prone, so instead we manage the .Rprofile in one repository that we import to our website as a submodule.</li>
</ul>
</section>
<section id="how-to-accomplish-this-git-submodules" class="level2">
<h2 class="anchored" data-anchor-id="how-to-accomplish-this-git-submodules">How to accomplish this: Git submodules</h2>
<p>Git submodules are repositories-within-repositories. Suppose you are working on a project repository (like your website), and there are external tools or resources that you want to import from another project. You have a strong project-based workflow, so you want all of the code that creates your website to be <em>contained within the website directory</em> on your computer. At the same time, the external dependency is clearly its own entity, and there is no reason why its code should be owned by the website repository. Git submodules allow you to clone this dependency repo into your website directory so you can use this code without versioning it redundantly.</p>
<section id="basics" class="level3">
<h3 class="anchored" data-anchor-id="basics">Submodule basics</h3>
<p>If you have never worked with submodules before, here is how they work in broad strokes. (This is not an exhaustive intro.)</p>
<p><strong>When you add a submodule to a parent repository, the parent repository tracks the <em>presence</em> of the submodule, but it does not track the content.</strong> Your website repo tracks the presence of submodules to ensure that your project can be reproduced (read: cloned) with all necessary dependencies in place.<sup>2</sup> However, your website repo is ignorant of the actual content of the submodule because the submodule code is versioned by its own separate repo. There is no need to duplicate that effort.</p>
<p><strong>Upstream changes to the submodule repo can be pulled into your website repo.</strong> This is standard workflow for Git. If you want to pin your dependency to a particular commit of the submodule, you can <code>git checkout</code> that commit. If you want your dependency to stay dynamically up to date with the submodule’s remote repo, checkout the desired branch and pull changes as they arise on the upstream remote.</p>
<p><strong>Local changes to the submodule content can be pushed to remote.</strong> If you have write access to the submodule’s remote repository—either you own the repo, or it’s your fork of some other repo—you can make changes to the submodule contents <em>from within the submodule</em> and push those changes back upstream.<sup>3</sup> This is just like a Git workflow where multiple users are pushing to the same remote repository, except instead of multiple users, it’s only you, editing the repo and committing/pushing changes from different endpoints. This allows you to keep the submodule content updated on all of its local and remote copies without duplicating any effort.</p>
</section>
<section id="how-to-add-your-website-components-as-submodules" class="level3">
<h3 class="anchored" data-anchor-id="how-to-add-your-website-components-as-submodules">How to add your website components as submodules</h3>
<p>In the spirit of modularity, there is actually nothing Blogdown-specific about including submodules within a project repository. All the same, I will discuss a Blogdown-specific example: the <code>.Rprofile</code> module, which I keep in <a href="https://github.com/mikedecr/dots_blogdown">its own repository here</a>. I discuss how I manage <em>blog posts</em> with submodules later on, because that conversation is a little more involved.</p>
<p>You can add a submodule to your (already initialized) website repo with <code>git submodule add [my-url] [my-destination-folder]</code>. You will want to be strategic about where you add the repo, since it will effectively behave like a cloned repository. I often create a <code>/submodules/</code> folder under my project root and clone submodules to that location.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from /path/to/site</span></span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mkdir</span> submodules</span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> submodules</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> submodule add git@github.com:mikedecr/dots_blogdown.git</span></code></pre></div>
<p>Adding the submodule <em>does not</em> clone its contents. It simply registers the submodule with the repository, creating an entry in the website repo’s <code>.gitmodules</code> file. You have to run a separate command to actually clone the submodule repo’s contents:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">git</span> submodule update <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--init</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--recursive</span></span></code></pre></div>
<p>The output will look like you did a <code>git clone</code>. At this point, there should exist a folder called <code>/dots_blogdown/</code> that contains the repo contents.</p>
<p>From there, your next step depends on how you want to use the contents of the submodule. For this particular example, we want this <code>.Rprofile</code> to live at the top of our website root. This ensures that the file’s code is executed when we open R to manage our website. I achieve this by linking the file to the website root (and, bonus, removing write permissions<sup>4</sup>).</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode sh code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># exit /submodules/</span></span>
<span id="cb3-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> ..</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -s = symlink, -f = force</span></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ln</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> ./submodules/dots_blogdown/.Rprofile ./.Rprofile</span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># bonus: remove write-permissions (make read-only)</span></span>
<span id="cb3-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-w</span> ./.Rprofile</span></code></pre></div>
<p>It is smart to automate any post-Git processes, such as linking files to other destinations, by putting these commands and other pre-build operations in your website’s <code>/R/build.R</code> file. This ensures that these operations are done each time your website is built, ensuring that your website can be safely reproduced if your submodule content should ever change. With that automation in place, if I ever changed my .Rprofile repo, I never have to worry about manually re-linking my updates to the right destination. The build script does it for me.</p>
</section>
<section id="developing-within-the-submodule-repo" class="level3">
<h3 class="anchored" data-anchor-id="developing-within-the-submodule-repo">Developing within the submodule repo</h3>
<p>The above instructions describe how to simply employ submodule files in your website. But suppose you wanted to change the content of the submodule files and push those changes back upstream. What would you do?</p>
<p><strong>Before making any changes to the submodule files, make sure the submodule isn’t in detached HEAD state.</strong> A detached HEAD state is basically what happens when you have checked out a commit <em>in isolation of the branch on which that commit lives</em>. When you are in detached HEAD state, you are basically looking at a copy of the project, but you cannot alter the project tree itself. Any files you change cannot be committed to a persistent branch. To make permanent changes, you have to checkout the branch that you want to track and commit changes to, which is probably <code>main</code>.</p>
<p><strong>Make your changes.</strong> Even though you are editing a file within a submodule repository, Blogdown doesn’t know or care, so it shouldn’t behave any differently. It will knit/render blog posts and serve your website locally like nothing is wrong. That’s because nothing <em>is</em> wrong.</p>
<p><strong>Commit changes to submdodule files to the submodule repository.</strong> From the command line, this means you probably should <code>cd</code> into the submodule repo before adding any files to the index. If you do Git stuff inside of a GUI, you should be able to make the submodule appear as its own repo that you can do add/commit/push actions to. (I don’t use Rstudio, so unfortunately I don’t know if Rstudio makes this easy.) After committing to your local copy of the submodule repo, you should notice that your parent repository detects an updated commit in the submodule! You should commit that change to the parent repository as well. This simply tells the parent repo that it should consult this new submodule to reproduce the project correctly. This is important because anyone else who clones your website repository (ahem, Netlify!) will need to import the submodule at the correct commit.</p>
<p><strong>Both submodule and parent repos can be pushed.</strong> If this is your first time pushing any submodule-related commits to Netlify, you will want to read the section about Netlify below.</p>
<p>As you get more familiar with Git, you won’t need to follow a checklist. You will simply be familiar enough with how Git works to know exactly what to do!</p>
</section>
</section>
<section id="blog" class="level2">
<h2 class="anchored" data-anchor-id="blog">What to do about your blog?</h2>
<p>Should your blog be one submodule repository, or several? My current setup is to treat every blog post as its own, separate module with its own, separate repository. This keeps each post and all of its dependencies isolated from other posts, which is cleanest for me from a reproducibility and modularity standpoint.</p>
<p>However, you may find many blog post repositories to be overkill, and would instead want a single repository containing all of your blog posts. Would that be fine?</p>
<p>In short, the single-blog-module setup may be possible, but it will likely require even more advanced Git magic than just submodules. If you really want to know the nasty technical details, you can read about the problem and one potential solution, with the caveat that I haven’t tested that workflow out. If you trust me that the single-repo workflow is pretty complicated except for people looking to increase their Git dexterity stats, you can skip ahead to read about separate repositories for each post.</p>
<section id="problem" class="level3">
<h3 class="anchored" data-anchor-id="problem">One submodule for all posts: the problem</h3>
<p>To explain, consider the submodule workflow mentioned earlier. If we wanted to use a “single submodule” approach to blogging, we would</p>
<ul>
<li>Move our blog posts to another repository and push it to the web.</li>
<li>Add this repository as a submodule located in your <code>content/blog</code> or analogous subdirectory.</li>
<li>The changes in the <code>content/blog</code> folder are now owned by the submodule repository. The parent repo will no longer see what’s happening in those files—only if you have made new commits.</li>
</ul>
<p>Unfortunately, this may be a critical problem for your website! This is because many themes ask you to put other important files under your <code>content/blog</code> directory, in addition to the posts. Many popular themes ask for a <code>content/blog/_index.md</code> file to manage the blog’s “listings” page. Many themes also will accept image files in that directory to use for headers and sidebars on the listings page. These files are problems for the single-repo workflow. If we let our blog submodule own the <code>content/blog</code> directory, those files can no longer be tracked by the parent (website) repository. Adding the files to the submodule’s <code>.gitignore</code> does not fix it either. So, what can be done?</p>
</section>
<section id="fix" class="level3">
<h3 class="anchored" data-anchor-id="fix">One submodule for all posts: there might be a way</h3>
<p>I haven’t tested this, but there might be a way to save the unified-blog-repository workflow: you could make your blog repository a <strong>bare repository</strong>.</p>
<p>A bare repository is a repository with no root directory. Now, if you have only used Git on a per-project basis, the idea of a repo with no root directory sounds unthinkable, but it is actually a common way to <a href="https://dev.to/bowmanjd/store-home-directory-config-files-dotfiles-in-git-using-bash-zsh-or-powershell-the-bare-repo-approach-35l3">version your “dotfiles”</a>. Here’s why: your dotfiles usually live at your <code>/home/username/</code> or <code>~/</code> directory. Many folks want to track these files to keep certain preferences synchronized on different machines, but as you can foresee, making a Git repository track your entire <code>~/</code> folder would be a horrible and terrifying idea. Instead, people create <em>bare</em> repositories that only track the contents that are explicitly added to the repository, regardless of their relative location to the repo’s <code>.git</code> folder.</p>
<p>How might this ameliorate our workflow problem? If we want one submodule repo to track all of the posts in <code>/content/blog</code>, but we don’t want that repo to own the other files in that directory, we might be able to achieve that effect with a bare submodule repo. Such a repo shouldn’t be aware of the other files under <code>content/blog</code>, because the repo <em>doesn’t know that it is the same folder</em> as those files.</p>
<p>Again, try it if you want, but you have no assurances from me that it will work.</p>
</section>
<section id="every-post" class="level3">
<h3 class="anchored" data-anchor-id="every-post">My choice: every post gets its own repository</h3>
<p>In lieu of the “advanced solution”, we opt for peak modularity: every blog post gets its own repository.</p>
<p>This workflow sounds tedious but is actually easier than you would think, and most of the steps are identical to what I have already covered above. Here’s a quick rundown of what I do:</p>
<ol type="1">
<li><strong>Start on Github</strong> or whichever remote service you prefer. Make a remote-first repository for a new post (give it a meaningful title) and copy its cloning link.</li>
<li><strong>Add the new repo as a submodule to a new folder for that post inside of <code>/content/blog</code>.</strong> I assume you use a “page bundle” model for organizing your blog code: separate folders for each post that contain respective <code>index.[R]markdown</code> files. It’s advisable to blog with page bundles even if you don’t want to implement hyper-modular blog versioning. Learn more about page bundles from Alison Hill <a href="https://www.apreshill.com/blog/2019-02-spoonful-bundles/">here</a>.</li>
<li><strong>Your <code>.gitmodules</code> file will automatically update to reflect the new submodule.</strong> You will eventually want to commit that change, but it doesn’t have to be now. If necessary, initialize/update the submodule to clone its contents into the new post directory.</li>
<li><strong>Checkout your desired submodule branch</strong> (e.g.&nbsp;<code>main</code>) so you can commit changes to your blog repo.</li>
<li><strong>Edit your post as you normally would</strong> by creating an <code>index.Rmarkdown</code> and typing away. This is where you would use <code>renv</code> to take a snapshot of your R package library in order to reproduce the post. Hugo will trip over the files created by <code>renv</code>, however, so if you want to use it (again, you should), add <code>"renv"</code> to the <code>ignoreFiles</code> field in your website’s <code>config.toml</code> (which you only have to do once per site).</li>
<li><strong>Commit changes to the blog module repository and push to remote.</strong></li>
<li><strong>You should notice that your parent repository detects an updated commit</strong> in the submodule. Commit that change to the parent repository as well. Pushing this <em>website commit</em> to remote will kick off a new Netlify build if you use continuous integration. Speaking of that…</li>
</ol>
</section>
</section>
<section id="netlify-setup" class="level2">
<h2 class="anchored" data-anchor-id="netlify-setup">Getting it working with Netlify</h2>
<p>Once you are done getting your site looking the way you want, and all of your files are committed to the parent and child repositories, you can push your website repo to the remote that Netlify is tracking.</p>
<p>Except, whoops, your site may fail to build on Netlify. Why? Netlify works by cloning your website repository to their servers and building it with Hugo on their end. This process fails if Netlify can’t successfully reproduce your website repo with all of the submodules declared in your <code>.gitmodules</code> file. Such failure can happen for two benign and fixable reasons: (1) the submodule is a private repository, or (2) the submodule was added using the repo’s <code>ssh</code> URL instead of the <code>https</code> URL.</p>
<p>In either case, all you have to do is add ssh-keys to grant Netlify access to these repositories. It sounds complicated and jargony, but Netlify describes the whole process <a href="https://docs.netlify.com/configure-builds/repo-permissions-linking/#git-submodules">right here</a>.</p>
<p>Once Netlify has access to the repositories, it can build its own copy of your website. This is because your parent Git repository spells out all of the instructions for cloning the required submodules at their requested commits.</p>
</section>
<section id="closing-note" class="level2">
<h2 class="anchored" data-anchor-id="closing-note">Closing note</h2>
<p>This post presents an opinionated view of a Blogdown website as a collection of modules and a corresponding workflow for managing them. If you find it helpful, awesome! But as always, you should do what works for you. It happened to be the case that I had a particular set of problems and a desire to strengthen some skills could help me solve them.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The system isn’t perfect. Some themes define special fields whose values are specified in your content files, but the main idea is there.↩︎</p></li>
<li id="fn2"><p>This is how Netlify builds your site, in fact. Netlify clones your website’s Git repository and builds it on their servers, so this is actually super important.↩︎</p></li>
<li id="fn3"><p>Just be sure you have checked out a branch (not in detached <code>HEAD</code> state) before you commit changes to the submodule files. More <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules#_working_on_a_submodule">here</a>.↩︎</p></li>
<li id="fn4"><p>Because I forcefully link the .Rprofile file from the submodule to the website root, any changes I make to the copy at the root would be overwritten if I ever re-linked the file. This is why I make the file read-only: to prevent myself from editing the wrong copy of the file. Just a little trick to guard against bugs :)↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>code</category>
  <category>git</category>
  <guid>https://mikedecr.netlify.app/blog/modular_blog/index.html</guid>
  <pubDate>Sat, 06 Nov 2021 05:00:00 GMT</pubDate>
  <media:content url="https://mikedecr.netlify.app/blog/modular_blog/git_featured.png" medium="image" type="image/png" height="84" width="144"/>
</item>
<item>
  <title>Non-flat implications of flat priors</title>
  <dc:creator>Michael DeCrescenzo</dc:creator>
  <link>https://mikedecr.netlify.app/blog/nonflat_implied_priors/index.html</link>
  <description><![CDATA[ 




<p>When many researchers first encounter Bayesian methods, they are nervous that their choice of prior distribution will ruin their posterior inferences. Estimation under non-Bayesian methods feels “automatic”, but Bayesian methods bear this additional risk of bad priors.<sup>1</sup> In this new uncertain territory, it initially feels safer to prefer flatter, more diffuse priors in your model. How bad can flat priors be if, in the extreme, you merely get the same answer that you would have gotten without Bayes?</p>
<p>This blog post discuss some areas where this reasoning breaks down. One, we discuss the fact that if some parameter has a prior, functions of that parameter have their own “implied” priors. And depending on the nature of those functions, the implied prior may take a form that the researcher does not expect when they first specify the prior on the original parameter.<sup>2</sup> A flat prior in one part of the model often leads to non-flat priors over downstream quantities. The default tendency to prefer flatness for all priors cannot avoid this. Two, we see how the parameters and functions-on-parameters in our model depend on the parameterization of the model. Different parameterizations naturally expose different parameters, and some parameters are easier to reason about than others. Parameterization affects whether a prior’s “flatness” is at all related to a prior’s “informativeness”.</p>
<section id="implied-priors" class="level2">
<h2 class="anchored" data-anchor-id="implied-priors">Implied priors</h2>
<p>Let’s say we have a model parameter, <img src="https://latex.codecogs.com/png.latex?%5Ctheta">, and we represent our uncertainty about this parameter with a probability distribution. As far as our model is concerned, therefore, <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is a random variable. If we pass <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> to some function <img src="https://latex.codecogs.com/png.latex?f">, then the value <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)"> is also a random variable with its own distribution. We can call the distribution of <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)"> its “implied prior”. You may hear others call it an “induced” prior.</p>
<p>We can construct an easy example by linearly transforming a Normal/Gaussian distribution. Even if you don’t do Bayesian statistics, the math here will probably be recognizable nonetheless, so it’s a good example for building intuition. Say that <img src="https://latex.codecogs.com/png.latex?%5Ctheta"> is a standard Normal variable (mean of 0, standard deviation of 1) and then define <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)%20=%20%5Cmu%20+%20%5Csigma%20%5Ctheta">. The result will be that <img src="https://latex.codecogs.com/png.latex?f(%5Ctheta)"> is distributed Normal with mean <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and standard deviation <img src="https://latex.codecogs.com/png.latex?%5Csigma">. We can simulate this to convince ourselves that this is true. I will use R for this, fixing the values of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">.</p>
<p>First, I will load some packages.</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"latex2exp"</span>)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magrittr"</span>)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dplyr"</span>)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tidyr"</span>)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ggplot2"</span>)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unlikely to work on your machine :)</span></span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_set</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme_gray</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">base_family =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"InconsolataGo Nerd Font Complete"</span>))</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-3_0cac5eef03f4f5e7d555f758bd92ccda">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># helpful theme functions</span></span>
<span id="cb3-2">remove_y_axis <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.text.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>(),</span>
<span id="cb3-4">          <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axis.ticks.y =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span>
<span id="cb3-5">}</span>
<span id="cb3-6">remove_grid <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">theme</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">panel.grid =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">element_blank</span>())</span>
<span id="cb3-8">}</span></code></pre></div>
</div>
<p>Here we create the function <code>f</code>, generate some Normal draws, and then apply <code>f</code> to those draws.</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-4_b9b58a339578bf1879aeaeba649d4fdc">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">sigma <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-2">mu <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb4-3">f <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(x) { mu <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> sigma <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x }</span>
<span id="cb4-4"></span>
<span id="cb4-5">d <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">theta =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb4-7">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">f_theta =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">f</span>(theta)</span>
<span id="cb4-8">)</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(d)</span>
<span id="cb4-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 10,000 × 2</span></span>
<span id="cb4-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      theta f_theta</span></span>
<span id="cb4-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##      &lt;dbl&gt;   &lt;dbl&gt;</span></span>
<span id="cb4-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1  0.0593    6.03</span></span>
<span id="cb4-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 -0.268     5.87</span></span>
<span id="cb4-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 -0.987     5.51</span></span>
<span id="cb4-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 -1.06      5.47</span></span>
<span id="cb4-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5  0.0496    6.02</span></span>
<span id="cb4-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6  1.39      6.69</span></span>
<span id="cb4-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7  0.287     6.14</span></span>
<span id="cb4-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8  0.226     6.11</span></span>
<span id="cb4-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 -1.39      5.30</span></span>
<span id="cb4-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10  0.103     6.05</span></span>
<span id="cb4-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ℹ 9,990 more rows</span></span></code></pre></div>
</div>
<p>We plot the Normal draws alongside the implied distribution of <code>f_theta</code>.</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-5_e934bf7ac9a01891ada51c5435ab4531">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># partial histogram w/ fixed args</span></span>
<span id="cb5-2">phist <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> purrr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">partial</span>(geom_histogram, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boundary =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this alone is sufficient to make the point</span></span>
<span id="cb5-4">histograms <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>(d) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">phist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> theta), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gray"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">phist</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> f_theta), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">fill =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"violet"</span>)</span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># but I make it pretty with labels and things</span></span>
<span id="cb5-9">histograms <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-10">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TeX</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta'</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">TeX</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">theta)"</span>)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"segment"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.25</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">xend =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.5</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">yend =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>,</span>
<span id="cb5-13">             <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">arrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">arrow</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unit</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cm'</span>))) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">annotate</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"text"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">150</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">label =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">vjust =</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-15">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Prior samples"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb5-16">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">breaks =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mikedecr.netlify.app/blog/nonflat_implied_priors/index_files/figure-html/unnamed-chunk-5-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>
<p>For Normal random variables, linear transformation have familiar effects. Add a constant, the mean increases by the same constant. Multiply by a constant, the standard deviation increases by the same factor.</p>
<p>This paricular implied prior is something that Bayesians routinely take advantage of. It is common to want a <img src="https://latex.codecogs.com/png.latex?X%20=%20%5Cmathrm%7BNormal%7D(%5Cmu,%20%5Csigma)"> prior where the values of <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma"> are also unknown parameters. Rather than specify that prior directly, it is often easier to sample <img src="https://latex.codecogs.com/png.latex?z%20=%20%5Cmathrm%7BNormal%7D(0,%201)"> and compute <img src="https://latex.codecogs.com/png.latex?X%20=%20%5Cmu%20+%20z%5Csigma"> after the fact. This is called a “non-centered” parameterization. It is useful because it de-correlates the Normal random variation (the <img src="https://latex.codecogs.com/png.latex?z"> component) from the variation in the priors for <img src="https://latex.codecogs.com/png.latex?%5Cmu"> and <img src="https://latex.codecogs.com/png.latex?%5Csigma">. This can improve the performance of Markov chain Monte Carlo sampling without losing any information about the <img src="https://latex.codecogs.com/png.latex?X"> quantity you ultimately want.</p>
</section>
<section id="implied-priors-for-nonlinear-functions" class="level2">
<h2 class="anchored" data-anchor-id="implied-priors-for-nonlinear-functions">Implied priors for nonlinear functions</h2>
<p>Nonelinear functions will stretch or shrink their input values in non-constant ways, which matters big time for implied prior densities. To see why, let’s think about prior density in itself. Say we have some probability mass of 1 that is uniformly distributed in some fixed interval of length <img src="https://latex.codecogs.com/png.latex?L">. The density will be <img src="https://latex.codecogs.com/png.latex?1%20/%20L">. What would happen if we shrunk the interval by half? The total mass in our interval stays the same, but the density would double to <img src="https://latex.codecogs.com/png.latex?1%20/%20(L%20/%202)"> because we have to fit just as much probability mass into an interval of half the volume. If we stretched the interval by a factor of two, the volume would also increase, but because we have constant probability mass, the density decreases to <img src="https://latex.codecogs.com/png.latex?1%20/%202L">.</p>
<p>A nonlinear transformation will apply this stretching and shrinking <em>non-uniformly</em> over the interval. Some regions of parameter space will be stretched (density decreases) and others will be compressed (density increases). As a result, a prior distribution that has a recognizable shape may be unrecognizable after a nonlinear transformation is applied to its support.</p>
<p>I have an example of my own research with Ken Mayer on <a href="https://www.liebertpub.com/doi/abs/10.1089/elj.2018.0536">voter identification requirements in Wisconsin</a>, which I will simplify for the sake of exposition. Let’s say that we have a voter registration file containing all registered voters in 2016 for a certain county. The voter registration file says whether each registered voter casted a vote in 2016 (but vote choice is anonymous). In this county, <img src="https://latex.codecogs.com/png.latex?N"> of the registrants in the file <em>did not vote</em>. How many of these nonvoters <em>would have voted</em> if not for the state’s voter identification requirement?</p>
<p>There are two parameters that would be helpful to know. First, not every nonvoter in the voter file was eligible to vote at their registered address at the time of the election. Many registrants move away, die, change their names, etc., so only some fraction of the <img src="https://latex.codecogs.com/png.latex?N"> nonvoters (say, <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon%20%5Cin%20%5B0,%201%5D">) were eligible to vote as registered in 2016. So that’s one parameter; call it the “eligibity rate”. Next, of the <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20%5Cvarepsilon"> eligible nonvoters, another proportion <img src="https://latex.codecogs.com/png.latex?%5Cpi%20%5Cin%20%5B0,%201%5D"> would have voted if not for the voter identification requirement. Call this the “vote prevention rate”. Our quantity of interest is the total number of voters who would have otherwise voted, which is calculated as <img src="https://latex.codecogs.com/png.latex?N%5Cvarepsilon%5Cpi">, and we only know <img src="https://latex.codecogs.com/png.latex?N">.</p>
<p>This means <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi"> are parameters to be estimated. Let’s say we give these parameters independent, flat priors on the <img src="https://latex.codecogs.com/png.latex?%5B0,1%5D"> interval; what would be the implied prior for <img src="https://latex.codecogs.com/png.latex?N%5Cvarepsilon%5Cpi">? Let’s simulate it again. We use a <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BBeta%7D(1,1)"> prior for each probability parameter. The Beta family is commonly used to model unknown probabilities<sup>3</sup>, and the <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BBeta%7D(1,%201)"> prior is a special case that gives flat density to all probability values. But when we multiply all of these terms together, the result will not be flat at all.</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-6_2963062d8067885dd54db0335787369e">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is a real value from the data</span></span>
<span id="cb6-2">N <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229625</span></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simulate Beta priors for pi and epsilon</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># calculate N . eps . pi</span></span>
<span id="cb6-6">v <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb6-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pi =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb6-8">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">epsilon =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb6-9">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pop_estimate =</span> N <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> epsilon <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> pi</span>
<span id="cb6-10">) </span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(v)</span>
<span id="cb6-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 100,000 × 3</span></span>
<span id="cb6-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##        pi epsilon pop_estimate</span></span>
<span id="cb6-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     &lt;dbl&gt;   &lt;dbl&gt;        &lt;dbl&gt;</span></span>
<span id="cb6-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 0.129  0.287          8512.</span></span>
<span id="cb6-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 0.360  0.757         62562.</span></span>
<span id="cb6-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 0.0607 0.191          2658.</span></span>
<span id="cb6-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 0.879  0.798        161070.</span></span>
<span id="cb6-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 0.0813 0.227          4235.</span></span>
<span id="cb6-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 0.280  0.978         62793.</span></span>
<span id="cb6-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 0.821  0.651        122760.</span></span>
<span id="cb6-23"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 0.952  0.613        134013.</span></span>
<span id="cb6-24"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 0.923  0.00709        1503.</span></span>
<span id="cb6-25"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 0.973  0.605        135287.</span></span>
<span id="cb6-26"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ℹ 99,990 more rows</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-7_564672ba27184889176868290c17c391">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">v <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb7-2">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(</span>
<span id="cb7-4">        <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">param_label =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">case_when</span>(param <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"epsilon"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eligibility rate"</span>,</span>
<span id="cb7-5">                                param <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pi"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vote prevention rate"</span>,</span>
<span id="cb7-6">                                param <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pop_estimate"</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Would-be voters"</span>)</span>
<span id="cb7-7">    ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb7-8">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> param_label, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boundary =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale_x_continuous</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labels =</span> scales<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>comma) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">NULL</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_y_axis</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb7-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_grid</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mikedecr.netlify.app/blog/nonflat_implied_priors/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>
<p>We started with flat priors for <img src="https://latex.codecogs.com/png.latex?%5Cvarepsilon"> and <img src="https://latex.codecogs.com/png.latex?%5Cpi">, but the implied prior for our quantity of interest is far from flat. If I had simply plopped this graphic into the paper and asserted that it was our prior for this quantity, we would have been in trouble over how <em>opinionated</em> it appears. But it is simply the mechanical result of multiplying two independent probability values with vague priors. The prior is still <em>uninformative</em>, but it’s a mistake to think that flatness is the same thing.</p>
</section>
<section id="parameterization-parameterization" class="level2">
<h2 class="anchored" data-anchor-id="parameterization-parameterization">Parameterization, parameterization</h2>
<p>Now that we have seen a <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BBeta%7D(1,1)"> prior, this would be a good time to talk about parameterization.</p>
<p>Let’s say we observe a binary variable <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D"> for a set of observations indexed <img src="https://latex.codecogs.com/png.latex?i">, and <img src="https://latex.codecogs.com/png.latex?y_%7Bi%7D"> takes the value 1 with probability <img src="https://latex.codecogs.com/png.latex?%5Cpi"> and 0 otherwise. We give <img src="https://latex.codecogs.com/png.latex?%5Cpi"> a flat <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BBeta%7D(1,1)"> prior, so our model looks like this: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bi%7D%20&amp;%5Csim%20%5Cmathrm%7BBernoulli%7D(%5Cpi)%20%5C%5C%0A%20%20%20%20%5Cpi%20&amp;%5Csim%20%5Cmathrm%7BBeta%7D(1,1).%0A%5Cend%7Balign%7D"> But in applied modeling, we often model probabilities on the logit scale. So we can introduce the log-odds (logit) parameter <img src="https://latex.codecogs.com/png.latex?%5Ceta%20=%20%5Clog%5Cleft(%5Cfrac%7B%5Cpi%7D%7B1%20-%20%5Cpi%7D%5Cright)"> and rewrite the model equivalently like so: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bi%7D%20&amp;%5Csim%20%5Cmathrm%7BBernoulli%7D(%5Cpi)%20%5C%5C%0A%20%20%20%20%5Cpi%20&amp;=%20%5Cfrac%7B1%7D%7B1%20+%20e%5E%7B-%5Ceta%7D%7D%0A%5Cend%7Balign%7D"> Only now we have to set a prior for <img src="https://latex.codecogs.com/png.latex?%5Ceta"> instead of <img src="https://latex.codecogs.com/png.latex?%5Cpi">. If we wanted our prior to be flat for the probability parameter <img src="https://latex.codecogs.com/png.latex?%5Cpi">, what prior would this be for the log-odds <img src="https://latex.codecogs.com/png.latex?%5Ceta">? I will simulate this by drawing <img src="https://latex.codecogs.com/png.latex?%5Cpi"> from a flat Beta prior and calculating <img src="https://latex.codecogs.com/png.latex?%5Ceta"> for each draw.</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-8_1102ca074db046b64a2efdd864ffce48">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">ps <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb8-2">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pi =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb8-3">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">eta =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(pi <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pi))</span>
<span id="cb8-4">)</span></code></pre></div>
</div>
<div class="cell" data-layout-align="center" width="8" height="4" data-hash="index_cache/html/unnamed-chunk-9_4b52930b677f30e74eb6a35b5c5f0a7f">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">ps <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb9-2">    tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(. <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> forcats<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">fct_rev</span>(param), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> label_parsed) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-6">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boundary =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-7">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_y_axis</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-8">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_grid</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb9-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Freqency"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter value"</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mikedecr.netlify.app/blog/nonflat_implied_priors/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid figure-img" width="576"></p>
</figure>
</div>
</div>
</div>
<p>So a flat prior for a probability implies a very non-flat prior for the logit probability. It turns out that the prior on the logit scale is a <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BLogistic%7D(0,%201)"> prior, which feels right when you remember that the inverse link function for logistic regression is the standard Logistic distribution function. We would find a similar result modeling the probability with a probit model instead: we would need a <img src="https://latex.codecogs.com/png.latex?%5Cmathrm%7BNormal%7D(0,1)"> prior on the probit scale to induce a flat prior on the probability scale.</p>
<p>The lesson here is that <a href="http://www.stat.columbia.edu/~gelman/research/published/entropy-19-00555-v2.pdf">priors only have meaning relative to some model parameterization</a>. If there are many ways to rewrite the likelihood for a model, then a flat prior in one parameterization is unlikely to be flat for all parameterizations. The consequence is that not all flat priors will be “noninformative”, and plenty of noninformative priors won’t look flat. It all depends on what a parameter value means in specific parameter space.</p>
</section>
<section id="nothing-is-safe-estimated-causal-effects-are-functions-of-parameters" class="level2">
<h2 class="anchored" data-anchor-id="nothing-is-safe-estimated-causal-effects-are-functions-of-parameters">Nothing is safe: estimated causal effects are functions of parameters</h2>
<p>Social scientists in the causal inference space often try to take a stance of principled agnosticism. They want to impose few assumptions, invoke models only minimally, and use simple estimators based on differences in means. But not even differences in means are safe.</p>
<p>We have an experiment with two groups, a control (0) and a treatment (1), with a binary outcome variable <img src="https://latex.codecogs.com/png.latex?y">. The groups have unkown means (success probabilities) that we represent with <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B0%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmu_%7B1%7D">, so the true treatment effect is <img src="https://latex.codecogs.com/png.latex?%5Ctau%20=%20%5Cmu_%7B1%7D%20-%20%5Cmu_%7B0%7D">. It’s common among social scientists to estimate this as a regression with an indicator for treatment status: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bi%7D%20=%20%5Cmu_%7B0%7D%20+%20%5Ctau%20z_%7Bi%7D%20+%20e_%7Bi%7D%0A%5Cend%7Balign%7D"> where <img src="https://latex.codecogs.com/png.latex?Z_%7Bi%7D"> is a treatment indicator and <img src="https://latex.codecogs.com/png.latex?e_%7Bi%7D"> is random error. Bayesians, always thinking about parameterization, would prefer to estimate the means directly: <img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Balign%7D%0A%20%20%20%20y_%7Bi%7D%20=%20(1%20-%20z_%7Bi%7D)%5Cmu_%7B0%7D%20+%20z_%7Bi%7D%5Cmu_%7B1%7D%20+%20e_%7Bi%7D%0A%5Cend%7Balign%7D"> because it is easier to give each group mean the same prior when the model is parameterized directly in terms of means. It would be pretty confusing to set one prior for the control mean and another prior for the difference in means, which is itself a function of the control mean. So let’s go with the second parameterization.</p>
<p>Because this is causal inference and we want to be principled agnostics, we employ some default thinking and give each group mean a flat prior, estimating the difference in means after we have the means. But if each group mean has a flat prior, what would be the implied prior for the difference in means? <em>Not flat!</em> We simulate another example, giving a flat prior to each mean and pushing the uncertainty into the treatment effect.</p>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-10_ab6b3561abc33b0baaba63a27fa74250">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># simulate means and calculate difference</span></span>
<span id="cb10-2">rct <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> tibble<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>(</span>
<span id="cb10-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu_0 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), </span>
<span id="cb10-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mu_1 =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rbeta</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb10-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">trt =</span> mu_1 <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> mu_0</span>
<span id="cb10-6">)</span>
<span id="cb10-7"></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(rct)</span>
<span id="cb10-9"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # A tibble: 1,000,000 × 3</span></span>
<span id="cb10-10"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##     mu_0   mu_1      trt</span></span>
<span id="cb10-11"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;</span></span>
<span id="cb10-12"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  1 0.316 0.0316 -0.284  </span></span>
<span id="cb10-13"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  2 0.327 0.329   0.00182</span></span>
<span id="cb10-14"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  3 0.184 0.851   0.667  </span></span>
<span id="cb10-15"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  4 0.596 0.0169 -0.579  </span></span>
<span id="cb10-16"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  5 0.696 0.561  -0.135  </span></span>
<span id="cb10-17"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  6 0.171 0.908   0.737  </span></span>
<span id="cb10-18"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  7 0.747 0.764   0.0173 </span></span>
<span id="cb10-19"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  8 0.318 0.382   0.0638 </span></span>
<span id="cb10-20"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">##  9 0.891 0.768  -0.123  </span></span>
<span id="cb10-21"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 10 0.779 0.0576 -0.721  </span></span>
<span id="cb10-22"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## # ℹ 999,990 more rows</span></span></code></pre></div>
</div>
<div class="cell" data-layout-align="center" data-hash="index_cache/html/unnamed-chunk-11_5821bb91c32e521998e3dbbb58771ddb">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">rct <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|&gt;</span></span>
<span id="cb11-2">    tidyr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pivot_longer</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cols =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">everything</span>(), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">names_to =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"param"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span></span>
<span id="cb11-3">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ggplot</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-4">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">aes</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> value) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-5">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">facet_grid</span>(</span>
<span id="cb11-6">            . <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~</span> param,</span>
<span id="cb11-7">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scales =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"free"</span>,</span>
<span id="cb11-8">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">labeller =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_labeller</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu_0"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Control mean"</span>,</span>
<span id="cb11-9">                                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mu_1"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment mean"</span>,</span>
<span id="cb11-10">                                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"trt"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Treatment effect"</span>))</span>
<span id="cb11-11">        ) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">geom_histogram</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">boundary =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">alpha =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">bins =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-13">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">labs</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">y =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Frequency"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">x =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Parameter value"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_y_axis</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span></span>
<span id="cb11-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">remove_grid</span>()</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://mikedecr.netlify.app/blog/nonflat_implied_priors/index_files/figure-html/unnamed-chunk-11-1.png" class="img-fluid figure-img" width="768"></p>
</figure>
</div>
</div>
</div>
<p>So we started with a flat prior on our group means, and we ended up with a non-trivial prior for the treatment effect. How did this happen? Averaging over my prior uncertainty in both groups, my expected difference in means ought to be mean zero (naturally). But more than that, we get a mode at zero because there are <em>many more ways</em> to obtain mean differences near zero than differences far from zero. We get big differences (near -1 or 0) only when both means are far apart, which isn’t as likely to happen randomly as two means that are a little closer together in the prior.</p>
<p>If we really wanted a flat prior on the treatment effect, what we would be saying is that big treatment effects are just as likely as small treatment effects. But this doesn’t make sense. If we devise a reasonable prior for our control group mean, and then we encode a “null” view into the treatment mean that it has the same prior as the control group, then the notion that “big treatment effects are just as likely as small treatment effects” is simply untenable. We should prefer to set reasonable priors for our grouop means directly and let the treatment effect prior take care of itself.</p>
</section>
<section id="let-go-of-the-need-for-flatness" class="level2">
<h2 class="anchored" data-anchor-id="let-go-of-the-need-for-flatness">Let go of the need for flatness</h2>
<p>These implications feel strange at first, but they are all around us whether we notice them or not. The flatness of a prior (or any shape, flat or not) is a relative feature of a model parameterization or a quantity of interest, not an absolute one. Inasmuch as we believe priors are at work even when we don’t want to think about them—i.e.&nbsp;we accept Bayesian models as generalizations of likelihood models—we should respect how transforming a likelihood affects which parameters are exposed to the researcher, and which spaces those parameters are defined in. We should know that flat priors aren’t necessarily vague, and vague priors aren’t necessarily flat. What we’re seeing here is that flatness begets non-flatness in tons of scenarios, but that is totally ordinary and nothing to be worried about.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For academic social scientists, at least, for whom unregularized least-squares or maximum likelihood estimation still dominate. Once you begin caring about regularization to prevent overfitting your model to your data, non-Bayesian inference quickly stops being automatic. But that’s academic for you: the luxury of never actually having to pay your loss function.↩︎</p></li>
<li id="fn2"><p>The shape of an implied prior can be quite useful in practice, when you know what you are getting into. For example, common methods for regularizing a linear model, like ridge and LASSO regression, have (loosely) analogous Bayesian prior distributions. Topic for a future post maybe.↩︎</p></li>
<li id="fn3"><p>Even in non-Bayesian inference, the Clopper-Pearson confidence interval is based on Beta distributions.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>statistics</category>
  <category>bayes</category>
  <guid>https://mikedecr.netlify.app/blog/nonflat_implied_priors/index.html</guid>
  <pubDate>Tue, 30 Jun 2020 05:00:00 GMT</pubDate>
</item>
</channel>
</rss>
